/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE"),
    geometry = /* color: 98ff00 */ee.Geometry.LineString(
        [[101.3818379375, 1.0106897682409128],
         [101.40381059375, -0.2252191465717146],
         [102.7825947734375, -0.19775351362548127],
         [102.7935811015625, 1.016182073033441],
         [101.3873311015625, 1.016182073033441]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');

//##########
//# Data Preprocessing 
//# Mark the area we want to do extrapolation on 
//##########
AFTER = AFTER.where(AFTER.eq(3),4);
BEFORE = BEFORE.where(AFTER.eq(3),4);
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");
Map.addLayer(expansion_area, {min: 0, max: 4, palette:[ db, gr, yellow, red ]},"expansion_area");
// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");

//##########
//# Minimum cost mapping: 
//##########

// Mask the sources image with itself.
var sources =BEFORE.eq(4).multiply(0.25);
sources = sources.updateMask(sources);
//Unifrom cost data
var cost = BEFORE.multiply(0).add(1); 
Map.addLayer(cost, {min: 0, max: 4, palette:[ gr, whi, db,red ]},"cost");
// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 50 * 1000 // 5 kilometers
});


//Mask out BEFORE area AND Non-expanding area 
var cumulativeCost_mask = cumulativeCost.where(BEFORE.eq(4), 0).where(AFTER.neq(4),0);
cumulativeCost_mask = cumulativeCost_mask.updateMask(cumulativeCost_mask);

//Calculate the percentile threshold 
var percentile_threshold = function(p){
  var Dictionary60 = cumulativeCost_mask.reduceRegion({
    reducer: ee.Reducer.percentile([p]),
    geometry: geometry});  
  return ee.Number(Dictionary60.get('cumulative_cost'))};
var N30 = percentile_threshold(30);
var N60 = percentile_threshold(60);
var N90 = percentile_threshold(90);

var E30 = cumulativeCost_mask.where(cumulativeCost.gte(N30),0);
var E60 = cumulativeCost_mask.where(cumulativeCost.gte(N60),0);
var E90 = cumulativeCost_mask.where(cumulativeCost.gte(N90),0);

// var cumulativeThreshold1 = cumulativeCost.where(cumulativeCost.gte(6e3),0).where(BEFORE.eq(4), 0).where(AFTER.neq(4),0);
var cumulativeThreshold1 = cumulativeCost.where(cumulativeCost.gte(27309.49486250461),0).where(BEFORE.eq(4), 0).where(AFTER.neq(4),0);
cumulativeThreshold1 = cumulativeThreshold1.updateMask(cumulativeThreshold1);

var cumulativeThreshold2 = cumulativeCost.lte(9e3);
var cumulativeThreshold3 = cumulativeCost.lte(12e3);
var cumulativeThreshold4 = cumulativeCost.lte(15e3);
var cumulativeThreshold5 = cumulativeCost.lte(18e3);
var cumulativeThreshold6 = cumulativeCost.lte(21e3);
var cumulativeThreshold7 = cumulativeCost.lte(24e3);






print(cumulativeCost, "cumulativeCost");
Map.addLayer(cumulativeCost_mask, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeCost_mask');
Map.addLayer(cumulativeThreshold, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeThreshold');
Map.addLayer(cumulativeThreshold1, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeThreshold1');
// Map.addLayer(cumulativeThreshold7, {min: 0, max: 7, palette:[ whi, yellow, gr, lb, db ] }, 'accumulated cost');





// Use cumulative cost to find an intermediate expansion 
// If 1. cumulativeCost is less than a threshold -- 1e5,
//    2. it does not overlap with the AFTER layer
var Selected_expansion = BEFORE.where(cumulativeThreshold.neq(0), 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion1 = BEFORE.where(cumulativeThreshold1, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion2 = BEFORE.where(cumulativeThreshold2, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion3 = BEFORE.where(cumulativeThreshold3, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion4 = BEFORE.where(cumulativeThreshold4, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion5 = BEFORE.where(cumulativeThreshold5, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion6 = BEFORE.where(cumulativeThreshold6, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion7 = BEFORE.where(cumulativeThreshold7, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);









// Visualize BEFORE, INTERMEDIATE, and AFTER 
// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
// Map.addLayer(Selected_expansion7, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE7');
// Map.addLayer(Selected_expansion6, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE6');
// Map.addLayer(Selected_expansion5, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE5');
// Map.addLayer(Selected_expansion4, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE4');
// Map.addLayer(Selected_expansion3, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE3');
// Map.addLayer(Selected_expansion2, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE2');
// Map.addLayer(Selected_expansion1, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE1');
// Map.addLayer(Selected_expansion, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE0');
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");



// Reduce the region. The region parameter is the Feature geometry.
var Dictionary60 = cumulativeCost.reduceRegion({
  reducer: ee.Reducer.percentile([60]),
  geometry: geometry,
  // scale: 30,
});

// The result is a Dictionary.  Print it.
print(Dictionary60);


var top_60 = cumulativeCost.lte(25472.116688324317);
Map.addLayer(top_60.updateMask(top_60), {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'accumulated cost 60');


var top_60_Selected_expansion = BEFORE.where(top_60, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
Map.addLayer(top_60_Selected_expansion, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'top_60_Selected_expansion');
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");




// var image= cumulativeCost;
// // Return the percentile values for each band in an image.
var get_percentile = function (image, percentile, crs, scale, geometry) {
  return image.reduceRegion(
    ee.Reducer.percentile(percentile), // reducer
    geometry, // geometry (Defaults to the footprint of the image's first band)
    null, // scale (Set automatically because bestEffort == true)
    null,
    null, // crsTransform,
    true  // bestEffort
  ).getInfo();
};

// // Get the CRS string for the image.
var crs = cumulativeCost_mask.getInfo().bands[0].crs;
var scale = 30;

// // Get the percentile values for each band.
var p05 = get_percentile(cumulativeCost_mask, [20], crs, scale, geometry);
var p95 = get_percentile(cumulativeCost_mask, [60], crs, scale, geometry);

// // Print out the image ststistics.
print('20%', p05, '60%', p95);
// print(p05.getInfo());
// 1536.38788112959
// 9031.93226477216
