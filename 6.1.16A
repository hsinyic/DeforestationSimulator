/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(102.10693359375, 3.973860975839102, 5);

// ############
// # Define Statistical Functions
// ############
var pixelcount = function(image, shape){
  var Stat = image.addBands(image);
  var r = Stat.reduceRegion({
    reducer: ee.Reducer.count().group(1),
    scale: 500,
    geometry: shape
  });
  return r; 
};
var area = function(image, shape, index){
    var areaImage = image.multiply(ee.Image.pixelArea());
    var stats = areaImage.reduceRegion({
        reducer: ee.Reducer.sum(),
        geometry: shape,
        scale: 500,
        // maxPixels: 5e9
    });
  return stats.get(index);
};

// get count function for pixel counts 
var getcount = function(dict, group){
  var list = ee.List(ee.Dictionary(dict).get('groups'));
  return ee.Dictionary(list.get(group)).get('count');
};

var percentile_threshold = function(p){
  var output = costmap.clip(targetarea).reduceRegion({
    reducer: ee.Reducer.percentile([p]),
    geometry: targetarea,
    scale: 500
  });
  print(output);
  return ee.Number(output.get('cumulative_cost'));
  }; 

// ############
// # Step 1: Load data 
// # 1) from Hansen 
// # 2) draw boundaries around malaysia, indo, PNG
// # 3) Gunarso vector maps, converted to raster
// ############
var malaysia = countries.filterMetadata('Country', 'equals', 'Malaysia');
var indonesia = countries.filterMetadata('Country', 'equals', 'Indonesia');
var PNG = countries.filterMetadata('Country', 'equals', 'Papua New Guinea');
var totalarea = malaysia.merge(indonesia).merge(PNG);



var lossYear = gfcImage.select(['lossyear']).clip(totalarea);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);


// //add color scheme 
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var lr = String("#ff8f7d");
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#f7f7f7');
var black = String('#101010');


// Convert Gunarso vector maps to a raster, Peninsula
var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});


var OP90_raster = blank.where(OP90_raster.eq(1), 1);
var OP00_raster = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1);
var OP05_raster = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1);
var OP10_raster = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1);

// Convert Gunarso vector maps to a raster, Sabah and Sarawak
var ma90_raster = ma90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma00_raster = ma00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma05_raster = ma05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma10_raster = ma10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});

var ma90_raster = blank.where(ma90_raster.eq(1), 1);
var ma00_raster = blank.where(ma00_raster.eq(1), 1).where(ma90_raster.eq(1), 1);
var ma05_raster = blank.where(ma05_raster.eq(1), 1).where(ma00_raster.eq(1), 1);
var ma10_raster = blank.where(ma10_raster.eq(1), 1).where(ma05_raster.eq(1), 1);

// Convert Gunarso vector maps to a raster, Indonesia and PNG
var in90_raster = in90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in00_raster = in00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in05_raster = in05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in10_raster = in10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});

var in90_raster = blank.where(in90_raster.eq(1), 1);
var in00_raster = blank.where(in00_raster.eq(1), 1).where(in90_raster.eq(1), 1);
var in05_raster = blank.where(in05_raster.eq(1), 1).where(in00_raster.eq(1), 1);
var in10_raster = blank.where(in10_raster.eq(1), 1).where(in05_raster.eq(1), 1);


// Revise to make sure NOP-OP scenarios is not possible 
var OP90 = blank.where(OP90_raster.eq(1), 1).where(ma90_raster.eq(1), 1).where(in90_raster.eq(1), 1).rename(['OP90']).clip(totalarea);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(ma00_raster.eq(1), 1).where(in00_raster.eq(1), 1).rename(['OP00']).clip(totalarea);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(ma05_raster.eq(1), 1).where(in05_raster.eq(1), 1).rename(['OP05']).clip(totalarea);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(ma10_raster.eq(1), 1).where(in10_raster.eq(1), 1).rename(['OP10']).clip(totalarea);


// ####################
// # Step 2: Categorical map for 1990-2000, 2000-2005, 2005-2010 
// ####################

var Gunarso = ee.Image([lossYear]);
Gunarso= Gunarso.addBands([OP90, OP00, OP05,OP10, treecover2000,blank]);


//Define transition variables
var NOP_NOP= 1;//NonOP to NonOP 
var NOP_OP= 2;//NonOP to OP
var OP_NOP= 3;//OP to NonOP
var OP_OP= 4;//OP to OP

var OP_90_00 = Gunarso.expression(
  "(OP1990==1 && OP2000==1) ? OP_OP \
    : (OP1990==1 && OP2000==0) ? OP_NOP \
      :(OP1990==0 && OP2000==0) ? NOP_NOP \
        : NOP_OP", 
        {
        'OP1990': Gunarso.select('OP90'),
        'OP2000': Gunarso.select('OP00'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_90_00']);

var OP_00_05 = Gunarso.expression(
    "(OP2000==1 && OP2005==1) ? OP_OP \
      : (OP2000==1 && OP2005==0) ? OP_NOP \
        :(OP2000==0 && OP2005==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2000': Gunarso.select('OP00'),
        'OP2005': Gunarso.select('OP05'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_00_05']);

var OP_05_10 = Gunarso.expression(
  "(OP2005==1 && OP2010==1) ? OP_OP\
      : (OP2005==1 && OP2010==0) ? OP_NOP \
        :(OP2005==0 && OP2010==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2005': Gunarso.select('OP05'),
        'OP2010': Gunarso.select('OP10'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_05_10']);


// print('op 1990- 2000',OP_90_00);
// print('op 2000- 2005',OP_00_05);
// print('op 2005- 2010',OP_05_10);

// Map.addLayer(OP_90_00.clip(totalarea), {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'OP_90_00');
Map.addLayer(OP_00_05.clip(totalarea), {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'OP_00_05');
Map.addLayer(OP_05_10.clip(totalarea), {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'OP_05_10');


// code NF, F, OPR, OP into numbers 
var NF_color = 1;
var F_color = 2;
var OPReplant_color = 3; 
var OP_color = 4; 
var OTH_color = 5;

// Create year_2000 classified layer of OP, F, NF  
var year_2000 = Gunarso.expression(
'(OP00 ==1)? OP\
  :((OP00==0) && treecover2000>=30)? F\
    :((OP00==0)&& treecover2000<30)? NF\
      :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OP00': Gunarso.select('OP00'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2000']);



// Analysis for Malaysia 
var targetarea = malaysia; 
var lossyear00_05 = lossYear.where(lossYear.eq(0), 99); // Assign zero lossyear as 99 
var A2000 = pixelcount(year_2000.gte(OPReplant_color), targetarea);
// print(getcount(A2000,1));



// count and area conversion 
// print("2000 count", getcount(pixelcount(OP00.eq(1), malaysia),1));
// print("2000 area", area(OP00.eq(1), malaysia,'OP00' ));
var Target = ee.List([3893371, 3932764,4059473,4200598,4648253,4837937]);
// for(var t = 1; t <= 3; ++t){
// pixel count target for year 2000 

var t=1;
  var A_target = ee.Number(Target.get(t));
  // print(A_target); 
  var G2001 = blank.where((lossyear00_05.eq(t)).and(OP_00_05.eq(NOP_OP)),1).clip(targetarea);
  G2001 = pixelcount(G2001, targetarea);
  var A_current = ee.Number(getcount(A2000,1)).add( ee.Number(getcount(G2001,1)));
  var A_expand = A_target.subtract(A_current);
  // print(ee.Number(getcount(A2000,1)));
  // print(ee.Number(getcount(G2001,1)));
  // print(A_current);
  // print('A_expand', A_expand);
  if(A_expand.getInfo()<0){
    lossyear00_05 = lossyear00_05;
    print('ah', t);
  }
  else{
  var Available  = blank
  .where(lossyear00_05.lte(t),1)
  .where(year_2000.eq(OP_color),1)
  .clip(targetarea);   
  // Map.addLayer(Available, {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'Available');
  var A_available  = ee.Number(getcount(pixelcount(Available.eq(1), targetarea),1));
  // print('A_available',A_available);
  var Percentage = A_expand.divide(A_available);
  // print('Percentage', Percentage);
  // Minimum Cost Mapping 
  var cost = blank.multiply(0).add(1).clip(targetarea); 
  var cumulativeCost = cost.cumulativeCost({
    source: Available,
    maxDistance: 50 * 1000 // 5 kilometers
  });
  Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeCost');
  // leave out area that is not NOP to OP
  // leave out area that has Hansen transition between 2001 to 2005 
  var costmap = cumulativeCost
  .where(OP_00_05.neq(NOP_OP),0) //clip out area where there is no transition 
  .where((OP_00_05.eq(NOP_OP)).and(lossyear00_05.lte(5)),0) ;// clip out area that is transition but Hansen already has a lossyear 
  costmap = costmap.updateMask(costmap);
  // Map.addLayer(costmap, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'costmap');
  var N = percentile_threshold(Percentage); 
  costmap = costmap.lt(N);
  // Simply label the places on Hansen lossyear map with 2001
  lossyear00_05 = lossyear00_05.where(costmap.neq(0), t) ;
  }
// }
var t=2;
  var A_target = ee.Number(Target.get(t));
  // print(A_target); 
  var G2001 = blank.where((lossyear00_05.eq(t)).and(OP_00_05.eq(NOP_OP)),1).clip(targetarea);
  G2001 = pixelcount(G2001, targetarea);
  var A_current = ee.Number(getcount(A2000,1)).add( ee.Number(getcount(G2001,1)));
  var A_expand = A_target.subtract(A_current);
  // print(ee.Number(getcount(A2000,1)));
  // print(ee.Number(getcount(G2001,1)));
  // print(A_current);
  // print('A_expand', A_expand);
  if(A_expand.getInfo()<0){
    lossyear00_05 = lossyear00_05;
    print('ah', t);
  }
  else{
  var Available  = blank
  .where(lossyear00_05.lte(t),1)
  .where(year_2000.eq(OP_color),1)
  .clip(targetarea);   
  // Map.addLayer(Available, {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'Available');
  var A_available  = ee.Number(getcount(pixelcount(Available.eq(1), targetarea),1));
  // print('A_available',A_available);
  var Percentage = A_expand.divide(A_available);
  // print('Percentage', Percentage);
  // Minimum Cost Mapping 
  var cost = blank.multiply(0).add(1).clip(targetarea); 
  var cumulativeCost = cost.cumulativeCost({
    source: Available,
    maxDistance: 50 * 1000 // 5 kilometers
  });
  Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeCost');
  // leave out area that is not NOP to OP
  // leave out area that has Hansen transition between 2001 to 2005 
  var costmap = cumulativeCost
  .where(OP_00_05.neq(NOP_OP),0) //clip out area where there is no transition 
  .where((OP_00_05.eq(NOP_OP)).and(lossyear00_05.lte(5)),0) ;// clip out area that is transition but Hansen already has a lossyear 
  costmap = costmap.updateMask(costmap);
  // Map.addLayer(costmap, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'costmap');
  var N = percentile_threshold(Percentage); 
  costmap = costmap.lt(N);
  // Simply label the places on Hansen lossyear map with 2001
  lossyear00_05 = lossyear00_05.where(costmap.neq(0), t) ;
  }
var t=3;
var t=2;
  var A_target = ee.Number(Target.get(t));
  // print(A_target); 
  var G2001 = blank.where((lossyear00_05.eq(t)).and(OP_00_05.eq(NOP_OP)),1).clip(targetarea);
  G2001 = pixelcount(G2001, targetarea);
  var A_current = ee.Number(getcount(A2000,1)).add( ee.Number(getcount(G2001,1)));
  var A_expand = A_target.subtract(A_current);
  // print(ee.Number(getcount(A2000,1)));
  // print(ee.Number(getcount(G2001,1)));
  // print(A_current);
  // print('A_expand', A_expand);
  if(A_expand.getInfo()<0){
    lossyear00_05 = lossyear00_05;
    print('ah', t);
  }
  else{
  var Available  = blank
  .where(lossyear00_05.lte(t),1)
  .where(year_2000.eq(OP_color),1)
  .clip(targetarea);   
  // Map.addLayer(Available, {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'Available');
  var A_available  = ee.Number(getcount(pixelcount(Available.eq(1), targetarea),1));
  // print('A_available',A_available);
  var Percentage = A_expand.divide(A_available);
  // print('Percentage', Percentage);
  // Minimum Cost Mapping 
  var cost = blank.multiply(0).add(1).clip(targetarea); 
  var cumulativeCost = cost.cumulativeCost({
    source: Available,
    maxDistance: 50 * 1000 // 5 kilometers
  });
  Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'cumulativeCost');
  // leave out area that is not NOP to OP
  // leave out area that has Hansen transition between 2001 to 2005 
  var costmap = cumulativeCost
  .where(OP_00_05.neq(NOP_OP),0) //clip out area where there is no transition 
  .where((OP_00_05.eq(NOP_OP)).and(lossyear00_05.lte(5)),0) ;// clip out area that is transition but Hansen already has a lossyear 
  costmap = costmap.updateMask(costmap);
  // Map.addLayer(costmap, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'costmap');
  var N = percentile_threshold(Percentage); 
  costmap = costmap.lt(N);
  // Simply label the places on Hansen lossyear map with 2001
  lossyear00_05 = lossyear00_05.where(costmap.neq(0), t) ;
  }

