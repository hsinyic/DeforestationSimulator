/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');

//##########
//# Data Preprocessing 
//##########
AFTER = AFTER.where(AFTER.eq(3),4);
BEFORE = BEFORE.where(AFTER.eq(3),4);

//##########
//# Mark the area we want to do extrapolation on 
//##########
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");
// Map.addLayer(expansion_area.updateMask(expansion_area));
// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");


//##########
//# Identify the patches to expand from   
//##########
var patchid = BEFORE.gte(3).connectedComponents(ee.Kernel.plus(1), 256);
Map.addLayer(patchid.randomVisualizer(), {}, 'patches with different colors');
// band1 is label, and band2 is a binary layer 
print(patchid);

//##########
//# Question1: do these different patches have different pixel values? 
//# If so, what are these values? 
//##########
//This show the same color, indicating that all patches have the same value 
// Map.addLayer(patchid.select("labels"), {min: -9, max: 9, palette:[ db, gr, yellow, red ]},"patchid_view");


//##########
//# Minimum cost mapping: 
//##########

// Pick patchid as the source image to expand from
// Mask the sources image with itself.
var sources =BEFORE.eq(4).multiply(0.25);
sources = sources.updateMask(sources);

// The cost data is generated from classification map BEFORE and AFTER.
// add another class in BEFORE image: expansion_area is assigned a value 0 
var cover = BEFORE.where(expansion_area.updateMask(expansion_area).neq(0), 0);

// Expansion Area have cost 1, Original RED Area have cost 2, GREEN AND BLUE Area have cost 9999 (forbiddenly high) 
var cost =
  cover.eq(0).multiply(1).add(
  cover.eq(3).or(cover.eq(4)).multiply(2).add(
  cover.eq(2).multiply(9999).add(
  cover.eq(1).multiply(9999))));
Map.addLayer(cover, {min: 0, max: 4, palette:[ whi, db ]},"cover");
Map.addLayer(cost, {min: 0, max: 4, palette:[ whi, db ]},"cost");


// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 30 * 1000 // 5 kilometers
});

// Set arbitrary thresholds >> regressional analysis to match the number of pixels and distance
var cumulativeThreshold = cumulativeCost.lte(5e3);
var cumulativeThreshold1 = cumulativeCost.lte(8e3);
var cumulativeThreshold2 = cumulativeCost.lte(9e3);
var cumulativeThreshold3 = cumulativeCost.lte(1e4);
var cumulativeThreshold4 = cumulativeCost.lte(5e4);



print(cumulativeCost, "cumulativeCost");
Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'accumulated cost');




// Use cumulative cost to find an intermediate expansion 
// If 1. cumulativeCost is less than a threshold -- 1e5,
//    2. it does not overlap with the AFTER layer
var Selected_expansion = BEFORE.where(cumulativeThreshold, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion1 = BEFORE.where(cumulativeThreshold1, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion2 = BEFORE.where(cumulativeThreshold2, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion3 = BEFORE.where(cumulativeThreshold3, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);
var Selected_expansion4 = BEFORE.where(cumulativeThreshold4, 4).where(AFTER.eq(1),1).where(AFTER.eq(2),2);






// Visualize BEFORE, INTERMEDIATE, and AFTER 
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
Map.addLayer(Selected_expansion4, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE4');
Map.addLayer(Selected_expansion3, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE3');
Map.addLayer(Selected_expansion2, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE2');
Map.addLayer(Selected_expansion1, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE1');
Map.addLayer(Selected_expansion, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE0');
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");





// Set a threshold and run the thing 
// Would setting different scales lead to anything? 
// Use a map function compute the maximum number of pixels with value 4 with different step size
// Find the step size that gives the optimal error. 