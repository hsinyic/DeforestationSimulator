/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: 0B4A8B */ee.Geometry.Polygon(
        [[[101.7718505859375, 0.17578097424708533],
          [101.7333984375, 0.10986321392741416],
          [101.7938232421875, 0.10437005946680143]]]),
    AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');


//Display the original images BEFORE and AFTER, as well as labeling expansion_area
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 
Map.addLayer(expansion_area.updateMask(expansion_area));
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");


//##########
//# Identify the patches to expand from, and make them geometric objects  
//# NOT SUCCESSFUL 
//##########
var patchid = BEFORE.gte(3).connectedComponents(ee.Kernel.plus(1), 256);
Map.addLayer(patchid.randomVisualizer(), {}, 'patches with different colors');
// band1 is label, and band2 is a binary layer 
// print(patchid);

//##########
//# Question1: do these different patches have different pixel values? 
//# If so, what are these values? 
//##########
//This show the same color, indicating that all patches have the same value 
Map.addLayer(patchid.select("labels"), {min: -9, max: 9, palette:[ db, gr, yellow, red ]},"patchid_view");



//##########
//# Minimum cost mapping: 
//##########

// Create a source image where the geometry is 1, everything else is 0.
var sources =patchid.select("labels").multiply(1);

// Mask the sources image with itself.
sources = sources.updateMask(sources);

// The cost data is generated from classification map BEFORE and AFTER.
// add another class in BEFORE image: expansion_area is assigned a value 0 
var cover = BEFORE.where(expansion_area.updateMask(expansion_area).neq(0), 0);

// Expansion Area have cost 1
// Original OP Area have cost 2 
// NF Area have cost 9999 (forbidden) 
// F Are have cost (forbidden)
var cost =
  cover.eq(0).multiply(1).add(
  cover.eq(3).or(cover.eq(4)).multiply(2).add(
  cover.eq(2).multiply(9999).add(
  cover.eq(1).multiply(9999))));
Map.addLayer(cover, {min: 0, max: 4, palette:[ whi, db ]},"cover");
Map.addLayer(cost, {min: 0, max: 4, palette:[ whi, db ]},"cost");


// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 5 * 1000 // 80 kilometers
});
var cumulativeThreshold = cumulativeCost.lte(1e5);
print(cumulativeCost, "cumulativeCost");
Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'accumulated cost');


// Use cumulative cost to find an intermediate expansion 
// If 1. cumulativeCost is less than a threshold -- 1e5,
//    2. it does not overlap with the AFTER layer
var Selected_expansion = BEFORE.where(cumulativeThreshold, 4);


// Visualize BEFORE, INTERMEDIATE, and AFTER 
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
Map.addLayer(Selected_expansion, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE');
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");





