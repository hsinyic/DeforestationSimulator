/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE"),
    geometry = /* color: d63000 */ee.Geometry.LinearRing(
        [[101.3983154296875, 1.016182073033441],
         [101.3983154296875, -0.21972602392079613],
         [102.821044921875, -0.2252191465717146],
         [102.81005859375, 1.0106897682409128],
         [101.3983154296875, 1.016182073033441]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');

//##########
//# Data Preprocessing 
//# Mark the area we want to do extrapolation on 
//##########
AFTER = AFTER.where(AFTER.eq(3),4);
BEFORE = BEFORE.where(AFTER.eq(3),4);
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");
Map.addLayer(expansion_area, {min: 0, max: 4, palette:[ db, gr, yellow, red ]},"expansion_area");
// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");

//##########
//# Minimum cost mapping: 
//##########

// Mask the sources image with itself.
var sources =BEFORE.eq(4).multiply(0.25);
sources = sources.updateMask(sources);
//Unifrom cost data
var cost = BEFORE.multiply(0).add(1); 
Map.addLayer(cost, {min: 0, max: 4, palette:[ gr, whi, db,red ]},"cost");
// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 50 * 1000 // 5 kilometers
});


//Mask out BEFORE area AND Non-expanding area 
var costmap = cumulativeCost.where(BEFORE.eq(4), 0).where(AFTER.neq(4),0);
costmap = costmap.updateMask(costmap);
Map.addLayer(costmap, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'costmap');


//Calculate the percentile threshold 
var percentile_threshold = function(p){
  var Dictionary = costmap.reduceRegion({
    reducer: ee.Reducer.percentile([p]),
    geometry: geometry}); 
  // print(Dictionary.keys());
  return ee.Number(Dictionary.get('cumulative_cost'))};
var N30 = percentile_threshold(30);
var N60 = percentile_threshold(60);
var N90 = percentile_threshold(90);

var N70 = percentile_threshold(70);
var N71 = percentile_threshold(71);
var N80 = percentile_threshold(80);
var N90 = percentile_threshold(90);
var N100 = percentile_threshold(100);
// print("N70", N70)
// print("N71", N71)
// print("N80", N80)
// print("N90", N90)
// print("N100", N100)


var E30 = costmap.where(cumulativeCost.gte(N30),0);
var E60 = costmap.where(cumulativeCost.gte(N60),0);
var E90 = costmap.where(cumulativeCost.gte(N90),0);

Map.addLayer(E30, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'E30');
Map.addLayer(E60, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'E60');
Map.addLayer(E90, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'E90');

// Test
// Visualize BEFORE, INTERMEDIATE, and AFTER 
var T30 = BEFORE.where(E30.neq(0), 4);
var T60 = BEFORE.where(E60.neq(0), 4);
var T90 = BEFORE.where(E90.neq(0), 4);
// .where(AFTER.eq(1),1).where(AFTER.eq(2),2)
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
Map.addLayer(T90, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE90');
Map.addLayer(T60, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE60');
Map.addLayer(T30, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE30');
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");



//Verify Statistics, turn all nonzero pixels into a value 
var pixelcount = function(image){
  var Stat = image.addBands(image);
  var r = Stat.reduceRegion({
    reducer: ee.Reducer.count().group(1),
    scale: 30,
    geometry: geometry
  });
  return r; 
};

E30 = E30.where(E30.neq(0),1);
E60 = E60.where(E60.neq(0),1);
E90 = E90.where(E90.neq(0),1);


// print(pixelcount(E30));
// print(pixelcount(E60));
// print(pixelcount(E90));
print(pixelcount(costmap));
print(pixelcount(cumulativeCost));


// var test= pixelcount(expansion_area);
// print("test",test );
// // print(test.keys());
// var test2 = ee.Number(pixelcount(expansion_area).get('groups')); 
// print("test2",test2);
// print(test2.get(1));
// print(pixelcount(expansion_area).values() );
// print(pixelcount(E30));