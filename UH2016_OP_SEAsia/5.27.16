/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    geometry = /* color: d63000 */ee.Geometry.Point([101.744384765625, 4.861100978309958]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//Verify Statistics, turn all nonzero pixels into a value 
var pixelcount = function(image, shape){
  var Stat = image.addBands(image);
  var r = Stat.reduceRegion({
    reducer: ee.Reducer.count().group(1),
    scale: 500,
    geometry: shape
  });
  return r; 
};
var area = function(image, shape){
  var areaImage = image.multiply(ee.Image.pixelArea());
  var stats = areaImage.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: shape,
    maxPixels: 8e11
  });
  return stats.get('cumulative_cost');
};



// ############
// # Step 1: Load data 
// # 1) from Hansen 
// # 2) draw boundaries around malaysia, indo, PNG
// # 3) Gunarso vector maps, converted to raster
// ############
var malaysia = countries.filterMetadata('Country', 'equals', 'Malaysia');
var indonesia = countries.filterMetadata('Country', 'equals', 'Indonesia');
var PNG = countries.filterMetadata('Country', 'equals', 'Papua New Guinea');
var totalarea = malaysia.merge(indonesia).merge(PNG);


var lossYear = gfcImage.select(['lossyear']);
var treecover2000 = gfcImage.select(['treecover2000']);
var nodata = gfcImage.select(['datamask']);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);



//Peninsula,Malaysia contour (for computing statistics within Penninsula region)
// var Peninsula_out= Peninsula_outline.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
// Map.addLayer(Peninsula_out.updateMask(Peninsula_out), {min: 0, max: 1, palette: ['0000FF']}, 'Peninsula_outline');



// //add color scheme 
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#181716');

// show lossyear, and where lossyear = 0 
Map.addLayer(lossYear.clip(totalarea).updateMask(lossYear),
            {'min': 0, 'max': 14, 'palette': ['0000FF', '00FF00', '00FFFF', 'FF0000']},
            'Hansen Forest Lost Year');

// Convert Gunarso vector maps to a raster, Peninsula
var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});



var OP90_raster = blank.where(OP90_raster.eq(1), 1);
var OP00_raster = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1);
var OP05_raster = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1);
var OP10_raster = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1);

// Convert Gunarso vector maps to a raster, Sabah and Sarawak
var ma90_raster = ma90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma00_raster = ma00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma05_raster = ma05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma10_raster = ma10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});

var ma90_raster = blank.where(ma90_raster.eq(1), 1);
var ma00_raster = blank.where(ma00_raster.eq(1), 1).where(ma90_raster.eq(1), 1);
var ma05_raster = blank.where(ma05_raster.eq(1), 1).where(ma00_raster.eq(1), 1);
var ma10_raster = blank.where(ma10_raster.eq(1), 1).where(ma05_raster.eq(1), 1);

// Convert Gunarso vector maps to a raster, Indonesia and PNG
var in90_raster = in90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in00_raster = in00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in05_raster = in05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in10_raster = in10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});

var in90_raster = blank.where(in90_raster.eq(1), 1);
var in00_raster = blank.where(in00_raster.eq(1), 1).where(in90_raster.eq(1), 1);
var in05_raster = blank.where(in05_raster.eq(1), 1).where(in00_raster.eq(1), 1);
var in10_raster = blank.where(in10_raster.eq(1), 1).where(in05_raster.eq(1), 1);


// Revise to make sure NOP-OP scenarios is not possible 
var OP90 = blank.where(OP90_raster.eq(1), 1).where(ma90_raster.eq(1), 1).where(in90_raster.eq(1), 1).rename(['OP90']).clip(totalarea);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(ma00_raster.eq(1), 1).where(in00_raster.eq(1), 1).rename(['OP00']).clip(totalarea);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(ma05_raster.eq(1), 1).where(in05_raster.eq(1), 1).rename(['OP05']).clip(totalarea);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(ma10_raster.eq(1), 1).where(in10_raster.eq(1), 1).rename(['OP10']).clip(totalarea);
// Map.addLayer(OP10_raster, {min: 0, max: 1, palette: ['FF0000']}, 'Gunarso OP 2010');
// Map.addLayer(OP05_raster, {min: 0, max: 1, palette: ['00FFFF']}, 'Gunarso OP 2005');
// Map.addLayer(OP00_raster, {min: 0, max: 1, palette: ['00FF00']}, 'Gunarso OP 2000');
// Map.addLayer(OP90_raster, {min: 0, max: 1, palette: ['0000FF']}, 'Gunarso OP 1990');
print('Gunarso image collection: ', Gunarso);

// ####################
// # Step 2: Categorical map for 1990-2000, 2000-2005, 2005-2010 
// ####################
var Gunarso = ee.Image([lossYear]);
Gunarso= Gunarso.addBands([OP90, OP00, OP05,OP10, treecover2000,blank]);


//Define transition variables
var NOP_NOP= 1;//NonOP to NonOP 
var NOP_OP= 2;//NonOP to OP
var OP_NOP= 3;//OP to NonOP
var OP_OP= 4;//OP to OP

var OP_90_00 = Gunarso.expression(
  "(OP1990==1 && OP2000==1) ? OP_OP \
    : (OP1990==1 && OP2000==0) ? OP_NOP \
      :(OP1990==0 && OP2000==0) ? NOP_NOP \
        : NOP_OP", 
        {
        'OP1990': Gunarso.select('OP90'),
        'OP2000': Gunarso.select('OP00'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_90_00']);

var OP_00_05 = Gunarso.expression(
    "(OP2000==1 && OP2005==1) ? OP_OP \
      : (OP2000==1 && OP2005==0) ? OP_NOP \
        :(OP2000==0 && OP2005==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2000': Gunarso.select('OP00'),
        'OP2005': Gunarso.select('OP05'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_00_05']);

var OP_05_10 = Gunarso.expression(
  "(OP2005==1 && OP2010==1) ? OP_OP\
      : (OP2005==1 && OP2010==0) ? OP_NOP \
        :(OP2005==0 && OP2010==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2005': Gunarso.select('OP05'),
        'OP2010': Gunarso.select('OP10'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_05_10']);


// print('op 1990- 2000',OP_90_00);
// print('op 2000- 2005',OP_00_05);
// print('op 2005- 2010',OP_05_10);

// Map.addLayer(OP_90_00.clip(totalarea).updateMask(OP_90_00), {min: 0, max: 4, palette: ['0000FF', '#00ffff', '#ff510f', '#ffec0d']}, 'OP_90_00');
// Map.addLayer(OP_00_05.clip(totalarea).updateMask(OP_00_05), {min: 0, max: 4, palette: ['0000FF', '#00ffff', '#ff510f', '#ffec0d']}, 'OP_00_05');
// Map.addLayer(OP_05_10.clip(totalarea).updateMask(OP_05_10), {min: 0, max: 4, palette: ['0000FF', '#00ffff', '#ff510f', '#ffec0d']}, 'OP_05_10');


// ############
// # Step 3: Preliminary data processing 
// # 1) Create 2000 Basemap  
// # 2) Fix inconsistencies for "NOP>OP, but no lossevents in between"
// # 3) Append the categorical maps, basemaps, and new lossyear layers 
// #    (00-05, 05-10) to Gunarso_intermediate band
// ############

// code NF, F, OPR, OP into numbers 
var NF_color = 1;
var F_color = 2;
var OPReplant_color = 3; 
var OP_color = 4; 
var OTH_color = 5;


// Create year_2000 classified layer of OP, F, NF  
var year_2000 = Gunarso.expression(
'(OP00 ==1)? OP\
  :((OP00==0) && treecover2000>=30)? F\
    :((OP00==0)&& treecover2000<30)? NF\
      :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OP00': Gunarso.select('OP00'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2000']);

// print('year_2000',year_2000);
// Map.addLayer(year_2000.clip(totalarea), {min: 0, max: 5, palette: [whi, db, lb, red, yellow, gr]}, 'year_2000');




//Create separate lossyear00_05 and lossyear05_10
Gunarso= Gunarso.addBands([OP_00_05, OP_05_10]);
var lossyear00_05= Gunarso.expression(
' OP_00_05== NOP_OP && (lossyear >5 || lossyear==0) ? random\
  :lossyear',
    {  
      'OP_00_05': Gunarso.select('OP_00_05'),
      'lossyear': Gunarso.select('lossyear'),
      'random': Gunarso.select('blank').add(99),
      'NOP_OP': NOP_OP
      // 'random': Gunarso.select('blank').add(Math.floor(Math.random()*5)+1)
    }
).rename(['lossyear00_05']);


var lossyear05_10= Gunarso.expression(
' OP_05_10==NOP_OP && (lossyear >10 || lossyear <=5) ? random\
  :lossyear',
    {  
      'OP_05_10': Gunarso.select('OP_05_10'),
      'lossyear': Gunarso.select('lossyear'),
      'random': Gunarso.select('blank').add(99),
      'NOP_OP': NOP_OP
      // 'random': Gunarso.select('blank').add(Math.floor(Math.random()*5)+6)
    }
).rename(['lossyear05_10']);

// Visualize 
// Map.addLayer(lossyear05_10.clip(totalarea).updateMask(lossyear05_10), {min: 0, max: 20, palette: ['0000FF', '#00ffff', '#ff510f', '#ffec0d']}, 'lossyear05_10');

//Append the new categorical maps to Gunarso band 
var Gunarso_intermediate = ee.Image([lossYear]);
Gunarso_intermediate= Gunarso_intermediate.addBands([year_2000,blank, OP_00_05, OP_05_10, lossyear05_10,lossyear00_05]);

// #########################
// #Step4 : Create yearly maps (stored in Gunarso_final)
// #########################

// Start a new collection of images 
var Gunarso_final =ee.Image([lossYear,year_2000 ]);

for (var t = 1; t <= 10; ++t){
  //2000<t<2005, basemap 2000, lossyear00_05, transition map is OP_00_05
  if(t<=5){
    var transition = String('b("OP_00_05")');
    var lossyear=String('lossyear00_05');
    var basemap = String('year_2000');
  }
  //2005 <t<2010, basemap 2005, lossyear05_10, transition map is OP_05_10
  else if(t>5 || t<=10){
    var transition = String('b("OP_05_10")');
    var lossyear= String('lossyear05_10'); 
    var basemap = String('year_2005');
  }

  // index is year_2001, year_2002, .... consistent with year_2000 defined before 
  var index = "year_" +String(t+2000);
  //define condNOP_NOP, condNOP_OP, condOP_OP
  var condNOP_NOP = Gunarso_intermediate.expression(transition+ String('==')+ String(NOP_NOP)); 
  var condNOP_OP = Gunarso_intermediate.expression(transition+ String('==')+ String(NOP_OP)); 
  var condOP_OP = Gunarso_intermediate.expression(transition+ String('==')+ String(OP_OP)); 


  //define executeNOP_NOP, executeNOP_OP, executeOP_OP
  var executeOP_OP = Gunarso_intermediate.expression(
  'lossYear==t ? OPR\
    :(lossYear>t || lossYear<t) ? OP\
    : OTH',
      {  
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'OPR': Gunarso_intermediate.select('blank').add(OPReplant_color),
        'lossYear': Gunarso_intermediate.select(lossyear),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        't': t,
      }
  );

  var executeNOP_OP = Gunarso_intermediate.expression(
  ' lossYear>t && basemap==F_color? F\
    : lossYear>t && basemap==NF_color?NF\
      : lossYear<=t? OP\
        :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': Gunarso_intermediate.select(lossyear),
        'basemap': Gunarso_intermediate.select(basemap),
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var executeNOP_NOP = Gunarso_intermediate.expression(
  ' basemap==F_color && (lossYear>t || lossYear==0)? F\
    :basemap==F_color && (lossYear<=t && lossYear>0)? NF\
          :basemap==NF_color ? NF\
            :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': Gunarso_intermediate.select(lossyear),
        'basemap': Gunarso_intermediate.select(basemap),
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );

  // individual yearmap classifications  
  var yearmap= Gunarso_intermediate.select('blank')
  .where(condOP_OP,executeOP_OP)
  .where(condNOP_OP,executeNOP_OP)
  .where(condNOP_NOP,executeNOP_NOP)
  .rename([index]);
  
  // at t=2005, add year_2005 as the base year map to Gunarso_intermediate for the period 2005-2010
  if(t==5){
  Gunarso_intermediate = Gunarso_intermediate.addBands(yearmap);
  }
  
  //append yearmap to Gunarso_final image collection
  Gunarso_final = Gunarso_final.addBands(yearmap);

}
print('Gunarso_final, 2000-2010', Gunarso_final);

// Graph all the classificaiton maps between 2000 to 2010 
for (var t = 5; t >= 0; --t){
    var index = "year_" +String(t+2000);
    // Map.addLayer(Gunarso_final.select(index).clip(totalarea).updateMask(Gunarso_final.select(index)), {min: 0, max: 5,
    // palette:[db, lb, gr, yellow, red, whi ]},index);
}

// ###################
// Compute summary statistics 
// ###################
/*for (var t = 5; t <= 5; ++t){
    var index = "year_" +String(t+2000);
    var output = Gunarso_final.select(index);
    var Stat = output.addBands(output);
    var r = Stat.reduceRegion({
      reducer: ee.Reducer.count().group(1),
      scale: 200,
      geometry: Peninsula_outline
    });
    print(2000+t, 'summary statistics', r);
    // print("pixel area", Stat.pixelArea());
}*/

var p = area(Gunarso_final.select('year_2000'));
print(p);

// for (var t = 0; t <= 2; ++t){
//     var index = "year_" +String(t+2000);
//     var output = Gunarso_final.select(index);
//     print(2000+t, 'summary statistics', area(output, Peninsula_outline));
//     // print("pixel area", Stat.pixelArea());
// }
//###################
//# Extrapolate expansion area 
//###################

// centerMap(102.0849609375, 0.39550467153201946, 7); //Indo
centerMap(101.744384765625, 4.861100978309958, 5); //Penninsula, Malaysia
var AFTER = Gunarso_final.select("year_2005").clip(Peninsula_outline);
var BEFORE = Gunarso_final.select("year_2000").clip(Peninsula_outline);
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");
// Map.addLayer(expansion_area, {min: 0, max: 4, palette:[ db, gr, yellow, red ]},"expansion_area");
// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");

//##########
//# Minimum cost mapping: 
//##########

// Mask the sources image with itself.
var sources =BEFORE.eq(4).multiply(0.25);
sources = sources.updateMask(sources);
//Unifrom cost data
var cost = BEFORE.multiply(0).add(1); 
Map.addLayer(cost, {min: 0, max: 4, palette:[ gr, whi, db,red ]},"cost");
// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 5 * 1000 // 5 kilometers
});

var costmap = cumulativeCost.where(BEFORE.eq(4), 0).where(AFTER.neq(4),0);
costmap = costmap.updateMask(costmap);
Map.addLayer(costmap, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'costmap');

var percentile_threshold = function(p){
  var Dictionary = costmap.clip(Peninsula_outline).reduceRegion({
    reducer: ee.Reducer.percentile([p]),
    geometry: Peninsula_outline,
    scale: 500
  }); 
  // print(Dictionary.keys());
  return ee.Number(Dictionary.get('cumulative_cost'))};
var N30 = percentile_threshold(50);
var E30 = costmap.where(cumulativeCost.gte(N30),0);
Map.addLayer(E30, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'E30');
var T30 = BEFORE.where(E30.neq(0), 4);

// Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
// Map.addLayer(T30, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE30');
// Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");




E30 = E30.where(E30.neq(0),1);
// print("pixelcount", pixelcount(E30,Peninsula_outline));
// print("area", area(E30,Peninsula_outline));






var Available  = blank.where(
    (OP_00_05.eq(NOP_OP))
    .and(
        (lossyear.gt(5))
        .or(lossyear.eq(0))
        ),1);