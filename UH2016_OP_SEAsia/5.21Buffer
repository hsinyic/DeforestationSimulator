/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE"),
    geometry = /* color: ff0000 */ee.Geometry.Polygon(
        [[[101.32141989411525, 1.0820885610661515],
          [101.31591795102315, -0.29113644420991325],
          [102.89795148866165, -0.27191059964397235],
          [102.85675198025115, 1.1370098949307597]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');

//##########
//# Data Preprocessing 
//##########
AFTER = AFTER.where(AFTER.eq(3),4);
BEFORE = BEFORE.where(AFTER.eq(3),4);

//##########
//# Mark the area we want to do extrapolation on 
//##########
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 


//##########
//# Identify the patches to expand from   
//##########
var patchid = BEFORE.gte(3).connectedComponents(ee.Kernel.plus(1), 256);


//##########
//# Minimum cost mapping: 
//##########

// Pick patchid as the source image to expand from
// Mask the sources image with itself.
var sources =patchid.select("labels").multiply(1);
sources = sources.updateMask(sources);

// The cost data is generated from classification map BEFORE and AFTER.
// add another class in BEFORE image: expansion_area is assigned a value 0 
var cover = BEFORE.where(expansion_area.updateMask(expansion_area).neq(0), 0);

// Expansion Area have cost 1, Original RED Area have cost 2, GREEN AND BLUE Area have cost 9999 (forbiddenly high) 
var cost =
  cover.eq(0).multiply(1).add(
  cover.eq(3).or(cover.eq(4)).multiply(2).add(
  cover.eq(2).multiply(9999).add(
  cover.eq(1).multiply(9999))));


// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 5 * 1000 // 5 kilometers
});
print(cumulativeCost, "cumulativeCost");
Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'accumulated cost');


// Use cumulative cost to find an intermediate expansion 
// If 1. cumulativeCost is less than a threshold -- 1e5  2. it does not overlap with the AFTER layer
var cumulativeThreshold = cumulativeCost.lte(1e5);

var INTERMEDIATE = BEFORE.where(cumulativeThreshold, 4);


// Visualize BEFORE, INTERMEDIATE, and AFTER 
Map.addLayer(AFTER, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"AFTER");
Map.addLayer(INTERMEDIATE, {min: 1, max: 4, palette:[ db, gr, yellow, red ] }, 'INTERMEDIATE');
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");




// Pixel count for each class//

var Stat = AFTER.addBands(AFTER);
var r = Stat.reduceRegion({
  reducer: ee.Reducer.count().group(1),
  scale: 900,
  geometry: geometry
});
print('summary statistics -- AFTER', r);

var Stat = INTERMEDIATE.addBands(INTERMEDIATE);
var r = Stat.reduceRegion({
  reducer: ee.Reducer.count().group(1),
  scale: 900,
  geometry: geometry
});
print('summary statistics -- INTERMEDIATE', r);

var Stat = BEFORE.addBands(BEFORE);
var r = Stat.reduceRegion({
  reducer: ee.Reducer.count().group(1),
  scale: 900,
  geometry: geometry
});
print('summary statistics -- BEFORE', r);


