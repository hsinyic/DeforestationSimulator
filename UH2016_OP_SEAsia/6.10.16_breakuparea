/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    Pen10 = ee.FeatureCollection("ft:1xabXcdjDWY8PCYLjAO6zH07XTczWVKqGcNVVQI3Y"),
    Pen05 = ee.FeatureCollection("ft:1YZK7dCxaKKF5WneTc3hcNyB1ss6nVRkl818pf7zI"),
    Pen90 = ee.FeatureCollection("ft:1zaZ7Z6NB0aGX5IfFTvWrVe3BJA5YrbCBfP85Y5de"),
    Pen00 = ee.FeatureCollection("ft:13VBea1Xy9bPFVVOGRGFT5gDA-Q8lE803AbNQyU5m"),
    center = /* color: d63000 */ee.Geometry.Point([102.392578125, 4.390228926463396]),
    fusionTable = ee.FeatureCollection("ft:1S4EB6319wWW2sWQDPhDvmSBIVrD3iEmCLYB7nMM"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/***
 * Generates a regular grid using given bounds.
 */
var generateGrid = function(xmin, ymin, xmax, ymax, dx, dy) {
  var xx = ee.List.sequence(xmin, xmax, dx)
  var yy = ee.List.sequence(ymin, ymax, dy)

  var cells = xx.map(function(x) {
    return yy.map(function(y) {
      var x1 = ee.Number(x)
      var x2 = ee.Number(x).add(ee.Number(dx))
      var y1 = ee.Number(y)
      var y2 = ee.Number(y).add(ee.Number(dy))
      
      var coords = ee.List([x1, y1, x2, y2]);
      var rect = ee.Algorithms.GeometryConstructors.Rectangle(coords);
      return ee.Feature(rect)
    })
  }).flatten();

  return ee.FeatureCollection(cells);
}

/**
 * Covers geometry with a regular grid.
 */
var coverByGrid = function(geom, dx, dy) {
  var bounds = ee.Geometry(geom).bounds()
  var coords = ee.List(bounds.coordinates().get(0))
  var ll = ee.List(coords.get(0))
  var ur = ee.List(coords.get(2))
  var xmin = ll.get(0)
  var xmax = ur.get(0)
  var ymin = ll.get(1)
  var ymax = ur.get(1)
  
  return generateGrid(xmin, ymin, xmax, ymax, dx, dy).filterBounds(geom).map(function(c) { return ee.Feature(c).intersection(geom) })
}

var states = ee.FeatureCollection('ft:1S4EB6319wWW2sWQDPhDvmSBIVrD3iEmCLYB7nMM')
var states_indo = ee.FeatureCollection('ft:1BIvH58CL17YCBkZe4Nmb3m27Ngcl2f-w-oB8zWzk', 'geometry')
// Map.addLayer(ee.Image().paint(states, 1, 1), {}, 'states')
Map.addLayer(ee.Image().paint(states_indo, 1, 1), {}, 'states')


// var state = states_indo.filter(ee.Filter.eq('NAME_1', 'Riau')).union(100).geometry();
var Riau = states_indo.filterMetadata('NAME_1', 'equals', 'Riau').union(100).geometry();
Riau = Riau.bounds();
// state = Riau ;
// print(state);
print(Riau)
Map.addLayer(ee.Image().paint(Riau, 1, 1), {}, 'states')


var stateGrid = coverByGrid(Riau, 2, 2)
Map.addLayer(stateGrid, {color:'222299'}, 'grid')
print(stateGrid);
Map.centerObject(center, 5)


/*
var input = image.eq(classes.get('forest')).multiply(ee.Image.pixelArea().divide(1000000))

// 1 degree cells
var area = stateGrid.map(function(c) {
    return ee.Feature(null, 
      input.reduceRegion({
          reducer: ee.Reducer.sum(), 
          geometry: ee.Feature(c).geometry(), 
          scale: 30,
          maxPixels: 1e9}))
  })
}).flatten()

*/

