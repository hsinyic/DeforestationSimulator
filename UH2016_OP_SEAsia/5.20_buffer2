/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: 0B4A8B */ee.Geometry.Polygon(
        [[[101.109077027073, 1.0982934909986786],
          [101.1145219551139, -0.5111121274793937],
          [103.05913122611992, -0.5056182112954141],
          [103.05358831154217, 1.109273425170133]]]),
    G2002 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/year_2002"),
    G2004 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/year_2004");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#181716');


//Display the original images
Map.addLayer(G2004, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"G2004");
Map.addLayer(G2002, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"G2002");

//Convert 2002 image to feature 
var vector2002 = G2002.addBands(G2002).reduceToVectors({
  geometry: geometry,
  crs: G2002.projection(),
  scale: G2002.projection().nominalScale(),
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'zone',
  reducer: ee.Reducer.mean()
});

var display2002 = ee.Image(0).updateMask(0).paint(vector2002, '000000', 3);
Map.addLayer(display2002, {palette: '000000'}, 'vectors2002');
print(vector2002);

// #########
// #Buffer for the first feature using script from 
// #https://groups.google.com/forum/#!searchin/google-earth-engine-developers/buffer/google-earth-engine-developers/KFT_e9lgBxE/ZtyZmwvPCQAJ
// ######### 

var feature = ee.Feature(vector2002.first());

function buffer(feature, bufferSize, bufferError){
  return feature.buffer(
      bufferSize, 
      ee.ErrorMargin(bufferError, 'projected'), 
      'EPSG:4326') ;
}

Map.addLayer(buffer(feature, 0.03, 0.015), {}, '1', false);
Map.addLayer(buffer(feature, 0.02, 0.01), {}, '2', false);
Map.addLayer(buffer(feature, -0.01, 0.005), {}, '3', false);

// ##########
// # Buffer for all features with red cells 
// ##########

// Join all features belonging to the red cells into one single feature, name it R


// Expand the new feature R 
