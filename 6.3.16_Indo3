/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    geometry = /* color: 00ffff */ee.Geometry.Polygon(
        [[[102.15225219726562, 4.136873372175124],
          [102.14744567871094, 3.6244418715038584],
          [103.2000732421875, 3.6593900720416443],
          [103.08952331542969, 4.127970187726043]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Map.setCenter(102.10693359375, 3.973860975839102, 9);
Map.setCenter(102.59239196777344,3.94029555672408, 11);

// NOT IMPORTANT add name string for colors, so I don't have to input the colors   
var db= ('0000FF').toString();
var lb= ('#11ffff').toString();
var red=('ff510f').toString();
var lr = ('#ff8f7d').toString();
var yellow=('#fff832').toString();
var gr= ('#4cff62').toString();
var whi=('#f7f7f7').toString();
var black = ('#101010').toString();

var scale = ee.Number(500); 
var totalarea = Peninsula_outline;
var lossYear = gfcImage.select(['lossyear']).clip(totalarea);
lossYear = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
lossYear =lossYear.min(lossYear.focal_mode(10, 'square'));
lossYear = lossYear.toInt();
Map.addLayer(lossYear.updateMask(lossYear.neq(99)), {min: 1, max: 14,
    palette:[ red, yellow, gr ,db]}, 'lossYear3');

var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);

// NOT IMPORTANT  Data Processing 
var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP90 = blank.where(OP90_raster.eq(1), 1).rename(['OP90']);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1).rename(['OP00']);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1).rename(['OP05']);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1).rename(['OP10']);

Map.addLayer(OP00.updateMask(OP00), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP00");
Map.addLayer(OP05.updateMask(OP05), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP05");


var lossYear1 = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
var Designated = blank.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), 1).clip(totalarea); 
var Target = ee.List([0, 0.2,0.4,0.6,0.8,1.00]);
//Minimum cost mapping 
var source = OP00;
source = source.updateMask(source);
var cost = blank.add(1).clip(totalarea); 
var cumulativeCost = cost.cumulativeCost({
    source: source,
    maxDistance: 100 * 1000 // 50 kilometers
  });
var costmap = blank.where(Designated.eq(1), cumulativeCost);
costmap = costmap.updateMask(costmap);
// Map.addLayer(source, {min: 0, max: 5e3,
//     palette:[db, lb, gr, yellow, red, whi  ]}, "source");
// Map.addLayer(cumulativeCost, {min: 0, max: 5e4,
//     palette:[db, lb, gr, yellow, red, whi  ]}, "cumulativeCost");
// Map.addLayer(costmap, {min: 0, max: 5e4,
//     palette:[db, lb, gr, yellow, red, whi  ]}, "costmap");


//Get a series of threshold corresponding to the percentage 
var mincostmapping = function(t){
  t= ee.Number(t);
  var N_target = ee.Number(Target.get(t));
  // print(N_target);
  var output = costmap.reduceRegion({
    reducer: ee.Reducer.percentile([t.multiply(100)]),
    geometry: totalarea,
    scale: scale
  });
  // print(output);
  return ee.Number(output.get('blank'));
};
var threshold = Target.map(mincostmapping);
// print(threshold);
// Update Hansen lossyear layer  
var execute = function(x){
  x=ee.Number(x).toInt();
  // print(x);
  var cuttoff = ee.Number(threshold.get(x));
  var cuttoff_before = ee.Algorithms.If(x.gt(1), ee.Number(threshold.get(x.subtract(1).toInt())), ee.Number(0.0));
  // print('year', x, cuttoff_before, cuttoff );
  var Binary = blank.where(costmap.lte(ee.Number(cuttoff)).and(costmap.gt(ee.Number(cuttoff_before))), 1).clip(totalarea);
// print(Binary);
  var lossYear_update = lossYear.where(Binary.eq(1), ee.Number(x));
  var Binary_show = blank.where(Binary.eq(1), ee.Number(x));
Map.addLayer(Binary_show.updateMask(Binary_show), {min: 0, max: 5, palette: [whi, yellow, red, lb, db]}, 'Binary');
  return lossYear_update;
};
// var x=0;
// lossYear = execute(x);
var x=1;
lossYear = execute(x);
x=2;
lossYear = execute(x);
x=3;
lossYear = execute(x);
x=4;
lossYear = execute(x);
x=5;
lossYear = execute(x);
