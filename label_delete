/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var shaleplay_or = ee.FeatureCollection("ft:1EIjMHaQqs6SGoIdocVDIQJfFQXVwVKr4tbOgpy6c"),
    GOM_offshore = ee.FeatureCollection("ft:1RkZEvZUCiE09ZyMOpkNBhjFik_VeZSAkCPqPK30S"),
    conventional_play = ee.FeatureCollection("ft:11jfMGryj5DdmBhG0GMP6ZcKWIK2oatWGUR1w9QUt"),
    GOM_boundary = ee.FeatureCollection("ft:1uOqEshx2FIgESMxBUB8IA0Mxxx2rbUlNcv6-cOS6"),
    Well = ee.FeatureCollection("ft:1Rto8ImdBnuDcBNX-ApGkuSfZf7UetvXjjFPc6RAu");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// easiest way is to export no location and no time labels 
// later, filter the no location labels out, add the offshore label 


/* ################ Color scheme################ */  
  var db= ('0000FF').toString();var bl = ('#538dd6').toString();var lb= ('#86abff').toString();
  var azure= ('#11ffff').toString();
  var red=('ff510f').toString();var lr = ('#ff8f7d').toString();
  var gr= ('#4cff62').toString();var lg = ('#afff14').toString();var dg= ('#196e0a').toString();
  var yellow=('#ffeb00').toString();var lyellow = ('#fffcb0').toString();
  var whi=('#f7f7f7').toString();var black = ('#101010').toString();
  var pink = ('#ff6ad8').toString();var lp = ('#ffb9ec').toString();
  var orange = ('#ff9d24').toString();var lorange = ('#ffcc99').toString();
/* ################################################ */
var shaleplay = shaleplay_or.union(); conventional_play= conventional_play.union(); var buffer_shaleplay = shaleplay.map(function(i){i=ee.Feature(i); return(i.buffer(ee.Number(1609).multiply(2)))});
var shaleplay_geometry = ee.Geometry(shaleplay.geometry());
var GOM_boundary_union = GOM_boundary.union()
var GOM_boundary_geometry= ee.Geometry(GOM_boundary_union.geometry());
Map.addLayer(conventional_play, {'color':red}, "conventional_play", 1, 0.2); Map.addLayer(shaleplay_or, {'color':black}, "shale play boundaries", 1, 0.5); // Map.addLayer(buffer_shaleplay,{'color':orange}, "shale play buffer", 1, 1)
Map.addLayer(shaleplay, {'color':black}, "shale play boundaries union", 1, 0.5); // Map.addLayer(buffer_shaleplay,{'color':orange}, "shale play buffer", 1, 1)
// ################  wells in shale ################ //
var add_location_label=  function(feature){
  feature = ee.Feature(feature);
  var property = ee.Number(feature.get('SurfaceLongitude'))
  var label = ee.Algorithms.If(property, 1, 2 ); // 2 means without surfaceLongitude 
  return(ee.Feature(feature).set("location",label )
  ); // 0 means has location, 1 means no location 
};

// Assume First Prod Year and First Prod Date are consistent 
var add_time_label=  function(feature){
  feature = ee.Feature(feature);
  var property = ee.Number(feature.get('First Prod Year'))
  var label =ee.Algorithms.If(property, 1, 2 ) //2 means without First Production Date
  return(ee.Feature(feature).set("time",label));
};



var processed_wells = ee.FeatureCollection(Well)
.map(add_location_label)
.map(add_time_label);

var set_shale = function(feature){
  feature = ee.Feature(feature);
  var result = feature
  .set("shale code", ee.Algorithms.If(feature.containedIn(shaleplay_geometry), 2,1 ))
  .set("shale", ee.Algorithms.If(feature.containedIn(shaleplay_geometry), "shale","conventional" ))
  return (ee.Feature(result));
};
var set_offshore = function(feature){
  feature = ee.Feature(feature);
  var result = feature
  .set("offshore code", ee.Algorithms.If(feature.containedIn(GOM_boundary_geometry), 2,1))
  .set("offshore", ee.Algorithms.If(feature.containedIn(GOM_boundary_geometry), "offshore","onshore"));
  return (ee.Feature(result));
};
processed_wells = processed_wells.map(set_offshore);
processed_wells = processed_wells.map(set_shale);
Export.table.toDrive(
  ee.FeatureCollection(processed_wells)
  .select(['shale_play', 'offshore', 
            'shale code', 'offshore code', 
            'location', 'time', 
            'SerialNumber2'])
, "label_offshore_shale_time_location");



//################ select wells of certaint attributes ################ //
var select = function( after,before, direction, type){
  after= ee.String(after); before = ee.String(before);
  after = ee.String(after).cat('-01-01');before= ee.String(before).cat('-01-01');
  // after = ee.Number.parse(after);before= ee.Number.parse(before);
  // after = ee.Number(after); before =ee.Number(before);
  direction = ee.String(direction);
  type= ee.List(type);  // print(before, after, direction, type, ee.Date(after).millis(), ee.Date(before).millis())
  var selected_fc = ee.FeatureCollection(processed_wells
  .filterMetadata('location','not_equals', 1)
  .filterMetadata('time','not_equals', 1)
  .filterMetadata('First Prod Date','greater_than', ee.Date(after).millis())
  .filterMetadata('First Prod Date','not_greater_than', ee.Date(before).millis())
  // .filterMetadata('First Prod Year','greater_than', after)
  // .filterMetadata('First Prod Year','not_greater_than', before)
  .filter(ee.Filter.inList('Drill Type',  [ee.String(direction)]))
  .filter(ee.Filter.inList('Updated Production Type',  type))); 
  return selected_fc;
};
var Well_List = ee.List([
  select('2003','2100', 'H', ['GAS'] ),
  select('2000','2003', 'H', ['GAS'] ),
  select('1800','2000', 'H', ['GAS'] ),

  select('2007','2100', 'H', ['OIL'] ),
  select('2000','2007', 'H', ['OIL'] ),
  select('1800','2000', 'H', ['OIL'] ),
  
  
  select('2003','2100', 'H', ['BOTH'] ),
  select('1800','2003', 'H', ['BOTH'] ),

  select('2000', '2100', 'U', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'U', ['GAS', 'BOTH', 'OIL']),

  select('2000', '2100', 'D', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'D', ['GAS', 'BOTH', 'OIL']),


  select('2000', '2100', 'V', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'V', ['GAS', 'BOTH', 'OIL'])
  ]);
var Well_List_names = ee.List([
  'H_gas_post2003',
  'H_gas_00to03',
  'H_gas_pre2000', 
  
  'H_oil_post2007',
  'H_oil_00to07',
  'H_oil_pre2000',
  
  'H_OG_post2003',
  'H_OG_pre2003', 
  
  'U_post2000', 
  'U_pre2000',
  
  'D_wells_post2000',
  'D_wells_pre2000',
  
  'V_wells_post2000',
  'V_wells_pre2000']);
var Well_List_code = ee.List.sequence(0, Well_List.size().subtract(1), 1);
var os_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('non_shale').toLowerCase());});var s_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('_shale').toLowerCase());});var all_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.toUpperCase());});
// print(Well_List);
var set_class = function(i, prev_well_list){
  i= ee.Number(i);
  prev_well_list = ee.List(prev_well_list);
  var element = ee.FeatureCollection(Well_List.get(i))
  var update = element.map(function(feature){
    feature = ee.Feature(feature);
    var results = feature.set("Class Label Code", Well_List_code.get(i))
    .set("Class Label", Well_List_names.get(i));
    return(ee.Feature(results));
    })
  var newlabeled_Well_List = prev_well_list.set(i, ee.FeatureCollection(update));
  return(ee.List(newlabeled_Well_List));
};

var classified = ee.List.sequence(0, Well_List.size().subtract(1), 1)
.iterate(set_class, Well_List);

classified = ee.List(classified);
// print(classified);
// var x=0;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=1;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=2;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=3;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=4;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=5;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=6;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=7;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=8;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=9;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=10;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=11;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=12;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");
// var x=13;var toexport = ee.FeatureCollection(classified.get(x)); Export.table.toDrive(ee.FeatureCollection(toexport), ee.String(Well_List_names.get(x)).getInfo(), "EI_Well_Output_temp");



var i = 0; var j = 3; var k = 6;
// Map.addLayer(ee.FeatureCollection(classified.get(i)), {'color':yellow}, Well_List_names.get(i).getInfo(), 1, 1); 
// Map.addLayer(ee.FeatureCollection(classified.get(j)), {'color':dg}, Well_List_names.get(j).getInfo(), 1, 1); 
// Map.addLayer(ee.FeatureCollection(classified.get(k)), {'color':pink}, Well_List_names.get(k).getInfo(), 1, 1); 


var collapse  = function(element , prev){
  prev = ee.FeatureCollection(prev);
  element = ee.FeatureCollection(element);
  return prev.merge(element);
};
var collapsed_classified = ee.List(classified).iterate(collapse, ee.FeatureCollection([]));
collapsed_classified = ee.FeatureCollection(collapsed_classified);
print(ee.FeatureCollection(collapsed_classified).aggregate_sum('Well Count'));


var label = ee.FeatureCollection(collapsed_classified)
.select(['Class Label',  'SerialNumber2'])

Export.table.toDrive(label, "Label_shale_class_correc"  )


