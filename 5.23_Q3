/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE"),
    geometry = /* color: 0B4A8B */ee.Geometry.LinearRing(
        [[101.3983154296875, 1.016182073033441],
         [101.3983154296875, -0.21972602392079613],
         [102.821044921875, -0.2252191465717146],
         [102.81005859375, 1.0106897682409128],
         [101.3983154296875, 1.016182073033441]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');
var black = String('#1a1a1a');
//##########
//# Data Preprocessing (ignore this part) 
//##########
BEFORE = BEFORE.where(BEFORE.eq(3),4);
Map.addLayer(BEFORE, {min: 1, max: 4, palette:[ db, gr, yellow, red ]},"BEFORE");

//##########
//# Minimum cost mapping: 
//##########

// Mask the sources image with itself.
var sources =BEFORE.eq(4);
sources = sources.updateMask(sources);
Map.addLayer(sources, {min: 0, max: 1, palette:[ whi, black ]},"sources");
// Unifrom cost of 1 in every pixel
var cost = BEFORE.multiply(0).add(1); 
Map.addLayer(cost, {min: 0, max: 1, palette:[ whi, black ]},"cost");
// Compute the cumulative cost to traverse the land cover.
var cumulativeCost = cost.cumulativeCost({
  source: sources,
  maxDistance: 50 * 1000 // 5 kilometers
});
Map.addLayer(cumulativeCost, {min: 0, max: 5e4, palette:[ whi, yellow, gr, lb, db ] }, 'acumulativeCost');


