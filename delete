/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Well = ee.FeatureCollection("ft:1COkqpSqnbi138IXDcakGmvYlArjhAfACCkGchYzd"),
    shaleplay_or = ee.FeatureCollection("ft:1EIjMHaQqs6SGoIdocVDIQJfFQXVwVKr4tbOgpy6c"),
    GOM_offshore = ee.FeatureCollection("ft:1RkZEvZUCiE09ZyMOpkNBhjFik_VeZSAkCPqPK30S"),
    conventional_play = ee.FeatureCollection("ft:11jfMGryj5DdmBhG0GMP6ZcKWIK2oatWGUR1w9QUt"),
    GOM_boundary = ee.FeatureCollection("ft:1uOqEshx2FIgESMxBUB8IA0Mxxx2rbUlNcv6-cOS6");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/* ################ Color scheme################ */  
  var db= ('0000FF').toString();var bl = ('#538dd6').toString();var lb= ('#86abff').toString();
  var azure= ('#11ffff').toString();
  var red=('ff510f').toString();var lr = ('#ff8f7d').toString();
  var gr= ('#4cff62').toString();var lg = ('#afff14').toString();var dg= ('#196e0a').toString();
  var yellow=('#ffeb00').toString();var lyellow = ('#fffcb0').toString();
  var whi=('#f7f7f7').toString();var black = ('#101010').toString();
  var pink = ('#ff6ad8').toString();var lp = ('#ffb9ec').toString();
  var orange = ('#ff9d24').toString();var lorange = ('#ffcc99').toString();
/* ################################################ */
  
print(Well);
// Use the filter to see if it adds up and is correct 
// Next step is to construct your schedule for next week


var spatialFilter = ee.Filter.intersects({
  leftField: 'API_number_adjusted',
  rightField: 'API/UWI',
  maxError: 100
});
var saveAllJoin = ee.Join.saveAll({
  matchesKey: 'Offshore_Matched',
});

Map.addLayer(GOM_offshore, {'color':pink}, "Offshore_wells", 1, 1);


Map.addLayer(Well, {'color':db}, "All_Wells", 1, 1);
var intersectJoined = saveAllJoin.apply( GOM_offshore, Well, spatialFilter);
Map.addLayer(intersectJoined, {'color':pink}, "GOEM_downloaded_GOM_boundary", 1, 1);



// var invertedJoin = ee.Join.inverted();

// // Apply the join.
// var invertedJoined = invertedJoin.apply(primary, secondary, filter);


print(intersectJoined);

// // Load a primary collection: Landsat imagery.
// var primary = ee.ImageCollection('LC8_L1T_TOA')
//     .filterDate('2014-04-01', '2014-06-01')
//     .filterBounds(ee.Geometry.Point(-122.09, 37.42));

// // Load a secondary collection: FLUXNET points in a Fusion Table.
// var fluxnet = ee.FeatureCollection('ft:1f85fvccyKSlaZJiAta8ojlXGhgf-LPPNmICG9kQ');

// // Define a spatial filter, with distance 100 km.
// var distFilter = ee.Filter.withinDistance({
//   distance: 100000,
//   leftField: '.geo',
//   rightField: '.geo',
//   maxError: 10
// });

// // Define a saveAll join.
// var distSaveAll = ee.Join.saveAll({
//   matchesKey: 'blahblah',
//   measureKey: 'hahahaha'
// });

// // Apply the join.
// var spatialJoined = distSaveAll.apply(primary, fluxnet, distFilter);

// // Print the result.
// print(spatialJoined);