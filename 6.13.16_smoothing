/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    geometry = /* color: d63000 */ee.Geometry.Polygon(
        [[[102.15225219726562, 4.136873372175124],
          [102.14744567871094, 3.6244418715038584],
          [103.2000732421875, 3.6593900720416443],
          [103.08952331542969, 4.127970187726043]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(102.59239196777344,3.94029555672408, 11);


var scale = ee.Number(500); 
var totalarea = geometry;
var lossYear = gfcImage.select(['lossyear']).clip(totalarea);
lossYear = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);

// NOT IMPORTANT add name string for colors, so I don't have to input the colors   
var db= ('0000FF').toString();
var lb= ('#11ffff').toString();
var red=('ff510f').toString();
var lr = ('#ff8f7d').toString();
var yellow=('#fff832').toString();
var gr= ('#4cff62').toString();
var whi=('#f7f7f7').toString();
var black = ('#101010').toString();
// NOT IMPORTANT  Data Processing 
var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP90 = blank.where(OP90_raster.eq(1), 1).rename(['OP90']);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1).rename(['OP00']);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1).rename(['OP05']);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1).rename(['OP10']);

var lossYear1 = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
Map.addLayer(lossYear1.updateMask(lossYear1.neq(99)), {min: 1, max: 14,
    palette:[ red, yellow, gr ,db]}, 'lossYear1');
var Designated = blank.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), 1).clip(totalarea); 


var minForestSize = 30;
var minDeforestSize = 3;
var segmentSize = lossYear.connectedPixelCount(Math.max(minForestSize, minDeforestSize), false);
// Invert pixels that are part of a too-small island
var minSize = ee.Image(minForestSize).where(lossYear, minDeforestSize);
var lossYear2 = lossYear.where(segmentSize.lt(minSize), lossYear.not());
print(lossYear2);
Map.addLayer(lossYear2.updateMask(lossYear2.neq(99)), {min: 1, max: 14,
    palette:[ red, yellow, gr ,db]}, 'lossYear2');

var lossYear3 =lossYear.min(lossYear.focal_mode(1, 'square'));