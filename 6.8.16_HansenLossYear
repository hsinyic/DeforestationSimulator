/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    Pen10 = ee.FeatureCollection("ft:1xabXcdjDWY8PCYLjAO6zH07XTczWVKqGcNVVQI3Y"),
    Pen05 = ee.FeatureCollection("ft:1YZK7dCxaKKF5WneTc3hcNyB1ss6nVRkl818pf7zI"),
    Pen90 = ee.FeatureCollection("ft:1zaZ7Z6NB0aGX5IfFTvWrVe3BJA5YrbCBfP85Y5de"),
    Pen00 = ee.FeatureCollection("ft:13VBea1Xy9bPFVVOGRGFT5gDA-Q8lE803AbNQyU5m");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(102.10693359375, 3.973860975839102, 6);
var scale = ee.Number(500); 
var totalarea = Peninsula_outline;
var lossYear = gfcImage.select(['lossyear']).clip(totalarea);
lossYear = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);

// NOT IMPORTANT add name string for colors, so I don't have to input the colors   
var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var lr = String("#ff8f7d");
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#f7f7f7');
var black = String('#101010');
// NOT IMPORTANT  Data Processing 
var OP90_raster = Pen90.reduceToImage({properties: ['Ha'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP00_raster = Pen00.reduceToImage({properties: ['Ha'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP05_raster = Pen05.reduceToImage({properties: ['Ha'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP10_raster = Pen10.reduceToImage({properties: ['Ha'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP90 = blank.where(OP90_raster.eq(1), 1).rename(['OP90']);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1).rename(['OP00']);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1).rename(['OP05']);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1).rename(['OP10']);

// Define parameters 
var lossYear1 = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
var Designated = blank.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), 1).clip(totalarea); 
var Target = ee.List([0, 0.2,0.5,0.6,0.9,1.0]);

//Minimum cost mapping 
var source = OP00;
source = source.updateMask(source);
var cost = blank.add(1).clip(totalarea); 
var cumulativeCost = cost.cumulativeCost({
    source: source,
    maxDistance: 50 * 1000 // 50 kilometers
  });
Map.addLayer(cumulativeCost, {min: 0, max: 5e4,
    palette:[db, lb, gr, yellow, red, whi  ]}, "cumulativeCost");
var costmap = blank.where(Designated.eq(1), cumulativeCost);
costmap = costmap.updateMask(costmap);
Map.addLayer(costmap, {min: 0, max: 5e4,
    palette:[db, lb, gr, yellow, red, whi  ]}, "cumulativeCost2");

//Get a series of threshold corresponding to the percentage 
var mincostmapping = function(t){
  t= ee.Number(t);
  var N_target = ee.Number(Target.get(t));
  // print(N_target);
  var output = costmap.clip(totalarea).reduceRegion({
    reducer: ee.Reducer.percentile([t.multiply(10)]),
    geometry: totalarea,
    scale: scale
  });
  // print(output);
  return ee.Number(output.get('blank'));
};
var threshold = Target.map(mincostmapping);
print('percentile threshold', threshold);


//Update Hansen lossyear layer  
var execute = function(x){
  x=ee.Number(x).toInt();
var cuttoff = ee.Number(threshold.get(x));
print(cuttoff);
var cuttoff_before = ee.Number(threshold.get(x.subtract(1).toInt()));
print(cuttoff_before);
// var Binary = blank.where(costmap.lte(cuttoff).or(costmap.gte(cuttoff_before)), 1 ).clip(totalarea);
var Binary = blank.where(costmap.lte(cuttoff).and(costmap.gte(cuttoff_before)), 1 ).clip(totalarea);
var lossYear_update = lossYear.where(Binary.eq(1), x);
print(lossYear_update);
};
var x=1;
execute(x);
x=2;
execute(x);
x=3;
execute(x);
x=4;
execute(x);
x=5;
execute(x);

//Try to use iterate() 
var placeholder = ee.Number(50);
var lossYear_2= lossYear.where(lossYear.eq(0), 99);
lossYear_2 = lossYear_2.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), placeholder) ;
var lossYear_update = function(list, prevlossYear) {
    var cuttoff = ee.Number(list);
    // print(cuttoff);
    // Need to get the previous element on the list 
    // var cuttoff_before = ee.Number(list.get(-1));
    // print(cuttoff_before);
    prevlossYear = ee.Image(prevlossYear); 
    var lossYear_update = prevlossYear.where(costmap.lte(cuttoff).and(prevlossYear.eq(50)), x );
    return ee.Image(lossYear_update);
};

var iterate = threshold.iterate(lossYear_update, lossYear1);
print(iterate);

// var list_iterate = function(list, prev){
//   var A = ee.Number(list); // should be 1,3,5,7,9,11
//   var B = ee.Number(list.get(-1)); // should be  1,3,5,7,9,11
//   prev = ee.Image(prev);
//   return ee.Image(prev.add(A.subtract(B)));
// };

// var list = ee.List([1,3,5,7,9,11]);
// var list_lag = ee.List([0, 2, 2, 2, 2, 2])
// 0 -1 
// 1- 3 
// 3- 5 
// //where it has not been labeled with the right kind, do it!!! 
// var result = list.iterate(list_iterate, blank)