/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    geometry = /* color: d63000 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.setCenter(101.08245301691568, 0.7909959458718788, 8);// Riau 
var printclass = function(t, folder){
  var year = t.toString();
  t= ee.Number(t).subtract(2000);
  var img = ee.Image(folder.get(t));
  var taskname = ee.String(year).cat(ee.String('Test_Riau1'));
  export_image = export_image.addBands(img);
  Export.image.toDrive({
    image: img,
    description: taskname.getInfo(),
    scale: 100,
    region: totalarea_outline,
    maxPixels: 1e13
  });

  return(3);
};

var scale = ee.Number(1000); 
var Indonesia_1 = ee.FeatureCollection('ft:1BIvH58CL17YCBkZe4Nmb3m27Ngcl2f-w-oB8zWzk', 'geometry');

var addprovinces = function(name, prev){
  name = ee.String(name);
  prev = ee.FeatureCollection(prev);
  return ee.FeatureCollection(prev
          .merge(Indonesia_1.filterMetadata('NAME_2', 'equals', name)));
};
var R1 =  ee.List(['Indragiri Hulu','Kuantan Singingi', 'Pelalawan', 'Kampar', 'Pekan Baru'])
          .iterate(addprovinces, Indonesia_1.filterMetadata('NAME_2', 'equals', 'Indragiri Hilir'));
var R2  =  ee.List(['Rokan Hulu','Rokan Hilir','Dumai','Bengkalis'])
          .iterate(addprovinces, Indonesia_1.filterMetadata('NAME_2', 'equals', 'Siak'));


var totalarea = ee.FeatureCollection(R1);
var totalarea_raster = totalarea.reduceToImage({properties: ['ID_0'],reducer: ee.Reducer.first()}); // for Indonesia_1
var totalarea_outline = totalarea.geometry().bounds();



//Import Hansen Global Data set 
var lossYear = gfcImage.select(['lossyear']).clip(totalarea_outline);
lossYear = lossYear.where(lossYear.eq(0), 99).add(2000);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea_outline);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea_outline);



//Import Vector Data  

var convert_to_image = function(feature){
  feature = ee.FeatureCollection(feature);
  return feature.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
};
var concatenate = function(map, prev){
  map = ee.Image(map);
  return ee.Image(prev.where(map.eq(1),1));
};
var layer90 = ee.List([Pen90, ma90,in90]).map(convert_to_image);
var layer00 = ee.List([Pen00, ma00,in00]).map(convert_to_image);
var layer05 = ee.List([Pen05, ma05,in05]).map(convert_to_image);
var layer10 = ee.List([Pen10, ma10,in10]).map(convert_to_image);


var OP90_new = ee.List.sequence(1,3,1).iterate(concatenate, blank) ;
print(OP90_new);


var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var OP90_raster = blank.where(OP90_raster.eq(1), 1);
var OP00_raster = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1);
var OP05_raster = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1);
var OP10_raster = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1);
// Convert Gunarso vector maps to a raster, Sabah and Sarawak
var ma90_raster = ma90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma00_raster = ma00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma05_raster = ma05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma10_raster = ma10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var ma90_raster = blank.where(ma90_raster.eq(1), 1);
var ma00_raster = blank.where(ma00_raster.eq(1), 1).where(ma90_raster.eq(1), 1);
var ma05_raster = blank.where(ma05_raster.eq(1), 1).where(ma00_raster.eq(1), 1);
var ma10_raster = blank.where(ma10_raster.eq(1), 1).where(ma05_raster.eq(1), 1);
// Convert Gunarso vector maps to a raster, Indonesia and PNG
var in90_raster = in90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in00_raster = in00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in05_raster = in05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in10_raster = in10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
var in90_raster = blank.where(in90_raster.eq(1), 1);
var in00_raster = blank.where(in00_raster.eq(1), 1).where(in90_raster.eq(1), 1);
var in05_raster = blank.where(in05_raster.eq(1), 1).where(in00_raster.eq(1), 1);
var in10_raster = blank.where(in10_raster.eq(1), 1).where(in05_raster.eq(1), 1);
var OP90 = blank.where(OP90_raster.eq(1), 1).where(ma90_raster.eq(1), 1).where(in90_raster.eq(1), 1).rename(['OP90']);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(ma00_raster.eq(1), 1).where(in00_raster.eq(1), 1).rename(['OP00']);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(ma05_raster.eq(1), 1).where(in05_raster.eq(1), 1).rename(['OP05']);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(ma10_raster.eq(1), 1).where(in10_raster.eq(1), 1).rename(['OP10']);


// ########
// # Load Hansen data. Filter for lossYear 
// ########
var binary_pre = ee.Image([0]).where(OP90.eq(1).and(OP10.eq(1)), 1).where((OP90.eq(0)).and(OP10.eq(1)),2 ).clip(totalarea_outline);
var binary = ee.Image([0]).where(totalarea_raster.neq(0),binary_pre).clip(totalarea_outline);
//Expansion
var lossYear_expand = lossYear.neq(2099); // make it binary 
lossYear_expand = lossYear_expand.where(lossYear_expand.connectedPixelCount(128).lte(64), 0); 
lossYear_expand = lossYear.where(lossYear_expand.neq(1), 2099);
//Replant 
var lossYear_replant = ee.Image([2099]).where(lossYear.neq(2099).updateMask(OP10.neq(0)), lossYear.divide(2).ceil().multiply(2).toInt());
lossYear_replant =lossYear_replant.min(lossYear_replant.focal_mode(10, 'square'));
lossYear_replant= lossYear_replant.where(lossYear_replant.connectedPixelCount(256).lte(16), 2099);
//Final assembling 
var lossYear_final = lossYear.where(binary.eq(1), lossYear_replant).where(binary.eq(2),lossYear_expand);
lossYear = lossYear_final; 






// ########
// # 1990 to 2000 annual maps 
// ########
var Designated90 = blank.where(OP90.eq(0).and(OP00.eq(1)), 1).clip(totalarea_outline); 
var Target90 = ee.List([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]); 
var source90 = ee.Image([0]).where(totalarea_raster.neq(0),OP90).clip(totalarea_outline); 
source90 = source90.updateMask(source90);
var years90 = ee.List.sequence(1991, 2000,1);

var buffer = function(Designated, Target,source, years ){
  var offset = ee.Number(years.get(0)).subtract(1);
  var cumulativeCost = ee.Image([1]).clip(totalarea_outline).cumulativeCost({source: source,maxDistance: 100 * 1000 });
  var costmap = blank.where(Designated.eq(1), cumulativeCost);
  costmap = costmap.updateMask(costmap);
  var mincostmapping = function(t){
    t= ee.Number(t);
    var N_target = ee.Number(Target.get(t));
    var output = costmap.reduceRegion({
      reducer: ee.Reducer.percentile([t.multiply(100)]),
      geometry: totalarea,
      scale: scale,
      maxPixels: 12e9,
    });
    return ee.Number(output.get('blank'));
  };
  var threshold = Target.map(mincostmapping); 
  var execute = function(x, prev){
    x= ee.Number(x);
    prev = ee.Image(prev);
    var t=x.toInt();  
    var index =ee.Number(x).subtract(offset).toInt();
    var cuttoff = ee.Number(threshold.get(index)); 
    var cuttoff_before = ee.Number(
                  ee.Algorithms.If(index.gt(1), ee.Number(threshold.get(index.subtract(1).toInt())), ee.Number(0.0))
                  );
    var Binary = ee.Image([0]).
              where(costmap.lte(cuttoff).and(costmap.gt(cuttoff_before)), 1).clip(totalarea_outline);
    var lossYear_update = prev.where(Binary.eq(1), t);
    return ee.Image(lossYear_update);
  };
  var map = ee.Image(years.iterate(execute, lossYear)); 
  return map;
};


var Hansen_update = buffer(Designated90, Target90,source90, years90); 
lossYear = Hansen_update;

// ########
// # 2000 to 2005 annual maps 
// ########
//Set aparameters 
var Designated00 = blank.where(
  (OP00.eq(0).and(OP05.eq(1)))
  .and(
    (lossYear.lte(2000)).or(lossYear.gt(2005)).or(lossYear.eq(99))), 1)
  .clip(totalarea_outline); 
var Target00 = ee.List([0, 0.2,0.4,0.6,0.8,1.0]);
var source00 = ee.Image([0]).where(totalarea_raster.neq(0),OP00).clip(totalarea_outline); 
source00 = source00.updateMask(source00);
var years00 = ee.List.sequence(2001, 2005,1);
var Hansen_update = buffer(Designated00, Target00,source00, years00); 
lossYear = Hansen_update; 

// ########
// # 2005 to 2010 annual maps 
// ########
var Designated05 = blank.where(
  (OP05.eq(0).and(OP10.eq(1)))
  .and(
    (lossYear.lte(2005)).or(lossYear.gt(2010)).or(lossYear.eq(99))), 1)
  .clip(totalarea_outline); 
var Target05 = ee.List([0,0.2,0.4,0.6,0.8,1.0]);
var source05 = ee.Image([0]).where(totalarea_raster.neq(0),OP05).clip(totalarea_outline); 
source05 = source05.updateMask(source05);
var years05  = ee.List.sequence(2006, 2010,1);
Hansen_update = buffer(Designated05, Target05,source05, years05); 
lossYear = Hansen_update; 




// ############
// # Step 3: Preliminary data processing 
// # 1) Buffer by field treatment 
// # 2) Create 2000 Basemap  
// ############
var Gunarso = ee.Image([lossYear,OP90, OP00, OP05,OP10, treecover2000,blank]);

// code NF, F, OPR, OP into numbers 
var NF_color = 1;
var F_color = 2;
var OPReplant_color = 3; 
var OP_color = 4; 
var NOP_color = 5;
var OTH_color = 6;

// Create year_2000 and year_2005 classified layer of OP, F, NF  
var year_2000 = Gunarso.expression(
'(OP00 ==1)? OP\
  :((OP00==0) && treecover2000>=30)? F\
    :((OP00==0)&& treecover2000<30)? NF\
      :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OP00': Gunarso.select('OP00'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2000']);



// #########################a
// #Step4 : Create annual maps (stored in Gunarso_final),  2000 <= t <= 2010
// #########################
var Gunarso_intermediate = ee.Image([lossYear]);
Gunarso_intermediate= Gunarso_intermediate.addBands([year_2000, blank, OP00, OP05, OP10, OP90 ]);

var yr = ee.List.sequence(2000, 2010, 1);
var annual = function(t){
  var timestamp = t.toString();
  t= ee.Number(t);
  var lossyear = lossYear; 
  var basemap = year_2000;
  var executeOP_OP = Gunarso_intermediate.expression(
  'lossYear==t && OP90 == 1 ? OPR\
    :lossYear==t && OP90 == 0 ? OP\
    :(lossYear>t || lossYear<t) ? OP\
    : OTH',
      {  
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'OPR': Gunarso_intermediate.select('blank').add(OPReplant_color),
        'lossYear': lossyear,
        'OP90': Gunarso_intermediate.select('OP90'),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        't': t,
      }
  );

  var executeNOP_OP = Gunarso_intermediate.expression(
    'lossYear>t ? basemap\
        : lossYear<=t? OP\
          :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': lossyear,
        'basemap': basemap,
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var executeNOP_NOP = Gunarso_intermediate.expression(
  ' basemap==F_color && (lossYear>t || lossYear==2099)? F\
    :basemap==F_color && (lossYear<=t && lossYear<2099)? NF\
          :basemap==NF_color ? NF\
            :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': lossyear,
        'basemap': basemap,
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var yearmap = blank
  .where(OP00.eq(1).and(OP10.eq(1)),executeOP_OP)
  .where(OP00.eq(0).and(OP10.eq(1)),executeNOP_OP)
  .where(OP00.eq(0).and(OP10.eq(0)),executeNOP_NOP);
  
  var final_yearmap = ee.Image([0]).where(totalarea_raster.neq(0), yearmap);
  return ee.Image(final_yearmap).clip(totalarea_outline);
};


var Gunarso = yr.map(annual);
var export_image = ee.Image([0]);
var t=2010; var p0= printclass(t, Gunarso);
t=2009; p0= printclass(t, Gunarso);
t=2008; p0= printclass(t, Gunarso);
t=2007; p0= printclass(t, Gunarso);
t=2006; p0= printclass(t, Gunarso);
t=2005; p0= printclass(t, Gunarso);
t=2004; p0= printclass(t, Gunarso);
t=2003; p0= printclass(t, Gunarso);
t=2002; p0= printclass(t, Gunarso);
t=2001; p0= printclass(t, Gunarso);
t=2000; p0= printclass(t, Gunarso);



