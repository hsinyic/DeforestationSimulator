/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var shaleplay_or = ee.FeatureCollection("ft:1EIjMHaQqs6SGoIdocVDIQJfFQXVwVKr4tbOgpy6c"),
    GOM_offshore = ee.FeatureCollection("ft:1RkZEvZUCiE09ZyMOpkNBhjFik_VeZSAkCPqPK30S"),
    conventional_play = ee.FeatureCollection("ft:11jfMGryj5DdmBhG0GMP6ZcKWIK2oatWGUR1w9QUt"),
    GOM_boundary = ee.FeatureCollection("ft:1uOqEshx2FIgESMxBUB8IA0Mxxx2rbUlNcv6-cOS6"),
    Well = ee.FeatureCollection("ft:1Rto8ImdBnuDcBNX-ApGkuSfZf7UetvXjjFPc6RAu"),
    BOEMoffshore_boundary = ee.FeatureCollection("ft:1CCkNqJ01FBC54wV-hkFCkngsAotxawo8MZyd0H-R"),
    Well_May18 = ee.FeatureCollection("ft:1uDXh73lzH4n2bJivvecwXA-Swiz3pb4j8LBnt75J");
/***** End of imports. If edited, may not auto-convert in the playground. *****/




var shaleplay = shaleplay_or.union(); conventional_play= conventional_play.union();
var shaleplay_geometry = ee.Geometry(shaleplay.geometry());
var GOM_boundary_union = BOEMoffshore_boundary.union();
var GOM_boundary_geometry= ee.Geometry(GOM_boundary_union.geometry());
// ################  wells in shale ################ //
var add_location_label=  function(feature){
  feature = ee.Feature(feature);
  var property = ee.Number(feature.get('SurfaceLongitude'));
  feature = feature.set("location",'default' );
  var location = ee.String(ee.Algorithms.If(property, 
  ee.Algorithms.If(feature.containedIn(GOM_boundary_geometry), "offshore", 
    ee.Algorithms.If(feature.containedIn(shaleplay_geometry), "onshore shale", "onshore conventional")),
  "no location"));
  var location_code = ee.Number(ee.Algorithms.If(property, 
  ee.Algorithms.If(feature.containedIn(GOM_boundary_geometry), 2, 
    ee.Algorithms.If(feature.containedIn(shaleplay_geometry), 4, 3)),
  1));
  feature = ee.Feature(feature.set("location", location));
  feature = ee.Feature(feature.set("location_code", location_code));
  return(ee.Feature(feature));
};

// Use First Prod Year to create "no time" label 
var add_time_label=  function(feature){
  feature = ee.Feature(feature);
  var date = feature.get('First Prod Year');
  var time =ee.Number(ee.Algorithms.If(date, 2, 1 )) //1 means without First Production Date
  var time_code = ee.String(ee.Algorithms.If(date, "with prod date", "no prod date" )) //1 means without First Production Date
  return(ee.Feature(feature).set("time",time).set("time_code",time_code));
};


var processed_wells = ee.FeatureCollection(Well_May18)
.map(add_location_label)
.map(add_time_label);

print(processed_wells.aggregate_count('time_code'));



Export.table.toDrive(
  ee.FeatureCollection(processed_wells)
  .select(['location', 'location_code', 
            'time', 'time_code', 
            'SerialNumber2'])
, "label_time_location");


//################ select wells of certaint attributes ################ //
var select = function( after,before, direction, type){
  after= ee.String(after); before = ee.String(before);
  after = ee.String(after).cat('-01-01');before= ee.String(before).cat('-01-01');
  direction = ee.String(direction);
  type= ee.List(type);
  var selected_fc = ee.FeatureCollection(processed_wells
  .filterMetadata('location','not_equals', 1)
  .filterMetadata('time','not_equals', 1)
  .filterMetadata('First Prod Date','greater_than', ee.Date(after).millis())
  .filterMetadata('First Prod Date','not_greater_than', ee.Date(before).millis())
  .filter(ee.Filter.inList('Drill Type',  [ee.String(direction)]))
  .filter(ee.Filter.inList('Updated Production Type',  type))); 
  return selected_fc;
};
var Well_List = ee.List([
  select('2003','2100', ['H', 'V', 'U', 'D'], ['GAS'] ),
  select('1800','2003', ['H', 'V', 'U', 'D'], ['GAS'] ),

  select('2007','2100', ['H', 'V', 'U', 'D'], ['OIL'] ),
  select('1800','2007', ['H', 'V', 'U', 'D'], ['OIL'] ),

  select('2003','2100', ['H', 'V', 'U', 'D'], ['BOTH'] ),
  select('1800','2003', ['H', 'V', 'U', 'D'], ['BOTH'] )  ]);
var Well_List_names = ee.List([
  'gas_post2003',
  'gas_pre2003', 

  'oil_pre2003',
  'oil_post2003',

  'OG_pre2003',
  'OG_post2003']);
var Well_List_code = ee.List.sequence(0, Well_List.size().subtract(1), 1);
var os_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('non_shale').toLowerCase());});var s_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('_shale').toLowerCase());});var all_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.toUpperCase());});
var set_class = function(i, prev_well_list){
  i= ee.Number(i);
  prev_well_list = ee.List(prev_well_list);
  var element = ee.FeatureCollection(Well_List.get(i))
  var update = element.map(function(feature){
    feature = ee.Feature(feature);
    var results = feature.set("Class_Label_Code", Well_List_code.get(i))
    .set("Class_Label", Well_List_names.get(i));
    return(ee.Feature(results));
    })
  var newlabeled_Well_List = prev_well_list.set(i, ee.FeatureCollection(update));
  return(ee.List(newlabeled_Well_List));
};
var classified = ee.List.sequence(0, Well_List.size().subtract(1), 1).iterate(set_class, Well_List);
var collapse  = function(element , prev){
  prev = ee.FeatureCollection(prev);
  element = ee.FeatureCollection(element);
  return prev.merge(element);
};
var collapsed_classified = ee.List(classified).iterate(collapse, ee.FeatureCollection([]));
collapsed_classified = ee.FeatureCollection(collapsed_classified);
var label = ee.FeatureCollection(collapsed_classified)
.select(['Class_Label', 'Class_Label_Code', 'SerialNumber2']);

Export.table.toDrive(label, "Label_class"  );