/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Well = ee.FeatureCollection("ft:1Rto8ImdBnuDcBNX-ApGkuSfZf7UetvXjjFPc6RAu"),
    shaleplay_or = ee.FeatureCollection("ft:1EIjMHaQqs6SGoIdocVDIQJfFQXVwVKr4tbOgpy6c"),
    conventional_play = ee.FeatureCollection("ft:1BUaXMmhXABk8pnXRBvWZnHVbQcPx5TQE74qVU2jG"),
    geometry3 = /* color: #4b55ff */ee.Geometry.Polygon(
        [[[-81.78054924372594, 25.519785708407063],
          [-81.7822265625, 25.522614647623296],
          [-82.08984375, 25.958044673317847],
          [-82.4853515625, 26.549222577692042],
          [-82.79296875, 27.254629577800063],
          [-82.9248046875, 27.527758206861883],
          [-83.1005859375, 28.226970038918342],
          [-83.14453125, 28.76765910569123],
          [-83.232421875, 29.3055613255277],
          [-83.9794921875, 29.840643899834436],
          [-84.2431640625, 29.53522956294847],
          [-85.4296875, 29.53522956294847],
          [-85.78125, 29.840643899834436],
          [-86.66015625, 29.993002284551075],
          [-87.1435546875, 29.993002284551075],
          [-88.1103515625, 29.993002284551075],
          [-88.4619140625, 29.611670115197406],
          [-89.033203125, 28.9600886880068],
          [-89.6044921875, 29.075375179558346],
          [-90.703125, 28.92163128242129],
          [-91.40625, 29.152161283318915],
          [-91.9775390625, 29.3055613255277],
          [-92.6806640625, 29.611670115197406],
          [-93.515625, 29.45873118535534],
          [-94.4384765625, 29.22889003019423],
          [-95.2294921875, 28.652030630362262],
          [-96.064453125, 28.265682390146477],
          [-96.85546875, 27.800209937418252],
          [-97.20703125, 26.902476886279832],
          [-96.9873046875, 26.194876675795218],
          [-97.119140625, 25.403584973186707]]]),
    geometry2 = /* color: #f1ff5d */ee.Geometry.Polygon(
        [[[-83.70339828250013, 42.36067223886009],
          [-83.7233965497606, 36.32649585463325],
          [-76.78826123344527, 37.67253509620034],
          [-73.95103498640799, 40.16127593903518],
          [-74.54237997262669, 42.90758581937808]]]),
    geometry1 = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-105.18310546875, 34.27083595165],
          [-104.96337890625, 30.581179257386985],
          [-99.84375, 30.12612436422458],
          [-100.17333984375, 33.94335994657882]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var Well_onshore= Well.filterBounds(geometry3);
var filter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
}); // tell the system how to match to two records 
var invertedJoin = ee.Join.inverted();// Define the join.





//center on Geometry on the map
Map.centerObject(geometry3, 6);


// Color scheme 
var db= ('0000FF').toString();var bl = ('#538dd6').toString();
var lb= ('#86abff').toString();
var azure= ('#11ffff').toString();
var red=('ff510f').toString();var lr = ('#ff8f7d').toString();
var gr= ('#4cff62').toString();var lg = ('#afff14').toString();var dg= ('#196e0a').toString();
var yellow=('#ffeb00').toString();var lyellow = ('#fffcb0').toString();
var whi=('#f7f7f7').toString();var black = ('#101010').toString();
var pink = ('#ff6ad8').toString();var lp = ('#ffb9ec').toString();
var orange = ('#ff9d24').toString();var lorange = ('#ffcc99').toString();


var shaleplay = shaleplay_or.union(); conventional_play= conventional_play.union();// var buffer_shaleplay = shaleplay.map(function(i){i=ee.Feature(i); return(i.buffer(ee.Number(1609).multiply(2)))});
Map.addLayer(conventional_play, {'color':red}, "conventional_play", 1, 0.2); Map.addLayer(shaleplay_or, {'color':black}, "shale play boundaries", 1, 0.5); // Map.addLayer(buffer_shaleplay,{'color':orange}, "shale play buffer", 1, 1)



//select wells of certaint atrributes 
var select = function( after,before, direction, type){
  after = ee.String(after).cat('-01-01');
  before= ee.String(before).cat('-01-01');
  direction = ee.String(direction);
  type= ee.List(type);  // print(before, after, direction, type, ee.Date(after).millis(), ee.Date(before).millis())
  var selected_fc = ee.FeatureCollection(Well
  .filterMetadata('First Prod Date','greater_than', ee.Date(after).millis())
  .filterMetadata('First Prod Date','not_greater_than', ee.Date(before).millis())
  .filter(ee.Filter.inList('Drill Type',  [ee.String(direction)]))
  .filter(ee.Filter.inList('Updated Production Type',  type))); 
  return selected_fc;
};
var Well_List = ee.List([
  select('2003','2100', 'H', ['GAS'] ),
  select('2000','2003', 'H', ['GAS'] ),
  select('1800','2000', 'H', ['GAS'] ),

  select('2007','2100', 'H', ['OIL'] ),
  select('2000','2007', 'H', ['OIL'] ),
  select('1800','2000', 'H', ['OIL'] ),
  
  
  select('2003','2100', 'H', ['BOTH'] ),
  select('1800','2003', 'H', ['BOTH'] ),

  select('2000', '2100', 'U', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'U', ['GAS', 'BOTH', 'OIL']),

  select('2000', '2100', 'D', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'D', ['GAS', 'BOTH', 'OIL']),


  select('2000', '2100', 'V', ['GAS', 'BOTH', 'OIL']),
  select('1800', '2000', 'V', ['GAS', 'BOTH', 'OIL'])
  ]);
var Well_List_names = ee.List([
  'H_gas_post2003',
  'H_gas_00to03',
  'H_gas_pre2000', 
  
  'H_oil_post2007',
  'H_oil_00to07',
  'H_oil_pre2000',
  
  'H_OG_post2003',
  'H_OG_pre2003', 
  
  'U_post2000', 
  'U_pre2000',
  
  'D_wells_post2000',
  'D_wells_pre2000',
  
  'V_wells_post2000',
  'V_wells_pre2000']);
// var offshore = function(i){fc=ee.FeatureCollection(fc); return(fc.filterBounds(geometry3));}
// var No_Offshore = ee.List([1,2]).map(offshore);
print(ee.List([1,2]));
var os_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('non_shale').toLowerCase());});
var s_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.cat('_shale').toLowerCase());});
var all_list_names = Well_List_names.map(function(i){i = ee.String(i);return(i.toUpperCase());});
// wells in shale 
var in_shale = function(fc){
  fc = ee.FeatureCollection(fc);
  // var output = fc.filterBounds(buffer_shaleplay);
  var output = fc.filter(ee.Filter.bounds(shaleplay));
  return ee.FeatureCollection(output);
}; var shale_well_FB = Well_List.map(in_shale);
// Inverted join to display wells not in shale
var filter = ee.Filter.equals({
  leftField: 'system:index',
  rightField: 'system:index'
}); // tell the system how to match to two records 
var invertedJoin = ee.Join.inverted();// Define the join.
var outside_shale = function(i){
  i = ee.Number(i);
  var invertedJoined = invertedJoin.apply(Well_List.get(i), shale_well_FB.get(i), filter);
  return invertedJoined;
};// Apply the join.
var non_shale_well_FB = ee.List.sequence(0,Well_List.size().subtract(1),1).map(outside_shale);
print(non_shale_well_FB);
// count number of wells
var well_count = function(fc){
  fc = ee.FeatureCollection(fc);
  var output = fc.aggregate_sum('Well Count');
  return ee.Number(output);
}; 
var count = Well_List.map(well_count); print('Total well count by type'); print(count);
var shale_well_FB_count = shale_well_FB.map(well_count);print('count of shale wellt/total well, by well type'); print(Well_List_names.zip(shale_well_FB_count).zip(count));



// measured depth histogram, set graph options.
var options = {title: 'measured depth',fontSize: 10,hAxis: {title: 'measured depth in ft'},vAxis: {title: 'well count'},series: {0: {color: 'blue'}}};
var measured_depth = function(fc, series_name, geo){
  fc = ee.List(fc);series_name = ee.List([series_name]);geo=ee.Geometry(geo);
  var histogram = ui.Chart.feature.histogram(ee.FeatureCollection(fc.get(i)).filterBounds(geo), 
    'Measured Depth (TD)',  30).setSeriesNames(series_name).setOptions(options); return(histogram);};
// avg_depth
var avg_depth = function(series_name, fc, geo){
  fc = ee.List(fc); series_name = ee.String(series_name);geo=ee.Geometry(geo);
  var roi = ee.FeatureCollection(fc.get(i)).filterBounds(geo);
  print(series_name
  ,roi.aggregate_mean('Measured Depth (TD)')//, 'Mean Measured Depth'
  ,roi.aggregate_count('Measured Depth (TD)')//, 'total count'
  ,roi.aggregate_count_distinct('Measured Depth (TD)'));//, 'unique value');
  return(ee.Number(0));
};


var i=0; var geometry= geometry3;

// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(i)), {'color':dg}, s_list_names.get(i).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(i)), {'color':azure}, os_list_names.get(i).getInfo(), 0, 1); 
// print(measured_depth(non_shale_well_FB, 'non_shale_well',geometry));
// print(measured_depth(shale_well_FB, 'shale_well',geometry));
// avg_depth('non_shale_well', non_shale_well_FB, geometry);
// avg_depth('shale_well', shale_well_FB, geometry);



i=1;
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(i)), {'color':db}, s_list_names.get(i).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(i)), {'color':lb}, os_list_names.get(i).getInfo(), 0, 1); 
// print(measured_depth(non_shale_well_FB, 'non_shale_well',geometry));
// print(measured_depth(shale_well_FB, 'shale_well',geometry));
// avg_depth('non_shale_well', non_shale_well_FB, geometry);
// avg_depth('shale_well', shale_well_FB, geometry);






















// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(0)), {'color':yellow}, os_list_names.get(0).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(1)), {'color':yellow}, os_list_names.get(1).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(2)), {'color':dg}, os_list_names.get(2).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(3)), {'color':lb}, os_list_names.get(3).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(4)), {'color':db}, os_list_names.get(4).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(5)), {'color':pink}, os_list_names.get(5).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(6)), {'color':black}, os_list_names.get(6).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(7)), {'color':whi}, os_list_names.get(7).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(8)), {'color':orange}, os_list_names.get(8).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(9)), {'color':lorange}, os_list_names.get(9).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(10)), {'color':lyellow}, os_list_names.get(10).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(non_shale_well_FB.get(11)), {'color':lg}, os_list_names.get(11).getInfo(), 0, 1); 

// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(0)), {'color':dg}, s_list_names.get(0).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(1)), {'color':red}, s_list_names.get(1).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(2)), {'color':yellow}, s_list_names.get(2).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(3)), {'color':dg}, s_list_names.get(3).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(4)), {'color':lb}, s_list_names.get(4).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(5)), {'color':db}, s_list_names.get(5).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(6)), {'color':pink}, s_list_names.get(6).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(7)), {'color':black}, s_list_names.get(7).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(8)), {'color':whi}, s_list_names.get(8).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(9)), {'color':orange}, s_list_names.get(9).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(10)), {'color':lorange}, s_list_names.get(10).getInfo(), 0, 1); 
// Map.addLayer(ee.FeatureCollection(shale_well_FB.get(11)), {'color':lyellow}, s_list_names.get(11).getInfo(), 0, 1); 

Map.addLayer(ee.FeatureCollection(Well_List.get(0)), {'color':dg}, Well_List_names.get(0).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(1)), {'color':red}, Well_List_names.get(1).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(2)), {'color':yellow}, Well_List_names.get(2).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(3)), {'color':dg}, Well_List_names.get(3).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(4)), {'color':lb}, Well_List_names.get(4).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(5)), {'color':db}, Well_List_names.get(5).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(6)), {'color':pink}, Well_List_names.get(6).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(7)), {'color':black}, Well_List_names.get(7).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(8)), {'color':whi}, Well_List_names.get(8).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(9)), {'color':orange}, Well_List_names.get(9).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(10)), {'color':lorange}, Well_List_names.get(10).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(11)), {'color':azure}, Well_List_names.get(11).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(12)), {'color':lp}, Well_List_names.get(12).getInfo(), 0, 1); 
Map.addLayer(ee.FeatureCollection(Well_List.get(13)), {'color':lyellow}, Well_List_names.get(13).getInfo(), 0, 1); 


// https://groups.google.com/forum/#!searchin/google-earth-engine-developers/$20ui.chart%7Csort:relevance/google-earth-engine-developers/b5JzmsCXr9w/hDRtvxqgAQAJ Introducing the EE User Interface API
