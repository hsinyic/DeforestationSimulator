/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Well = ee.FeatureCollection("ft:1Rto8ImdBnuDcBNX-ApGkuSfZf7UetvXjjFPc6RAu"),
    geometry = /* color: #bf04c2 */ee.Geometry.Point([-95.93974113464355, 30.11038488561688]),
    shaleplay = ee.FeatureCollection("ft:1EIjMHaQqs6SGoIdocVDIQJfFQXVwVKr4tbOgpy6c"),
    conventional_play = ee.FeatureCollection("ft:1BUaXMmhXABk8pnXRBvWZnHVbQcPx5TQE74qVU2jG");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//center on Geometry on the map
Map.centerObject(geometry, 5);


// Color scheme 
var db= ('0000FF').toString();
var lb= ('#11ffff').toString();
var bl = ('#538dd6').toString();
var red=('ff510f').toString();
var lr = ('#ff8f7d').toString();
var gr= ('#4cff62').toString();
var lg = ('#afff14').toString();
var dg= ('#196e0a').toString();
var yellow=('#ffeb00').toString();
var whi=('#f7f7f7').toString();
var black = ('#101010').toString();
var pink = ('#ff50f1').toString();
var orange = ('#ff9d24').toString();
var lorange = ('#ffcc99').toString();
var lyellow = ('#fffcb0').toString();

Map.addLayer(conventional_play, {'color':red}, "conventional_play", 1, 0.2); 
Map.addLayer(shaleplay, {'color':black}, "shale play boundaries", 1, 0.5); 



//select wells of certaint atrributes 
// Directional wells whose First Production Date is after the 2000s
var H_post2000 = Well
.filterMetadata('First Prod Date','greater_than', ee.Date('2000-01-01').millis())
.filterMetadata("Drill Type","equals","H"); 

// Directional wells whose First Production Date is before the 2000s
var H_pre2000 = Well
.filterMetadata('First Prod Date','less_than', ee.Date('2000-01-01').millis())
.filterMetadata("Drill Type","equals","H"); 

var U_post2000 = Well
.filterMetadata('First Prod Date','greater_than', ee.Date('2000-01-01').millis())
.filterMetadata("Drill Type","equals","U");

var U_pre2000 = Well
.filterMetadata('First Prod Date','less_than', ee.Date('2000-01-01').millis())
.filterMetadata("Drill Type","equals","U");

 
//view horizontal wells with early dates 
var D_wells = Well
.filter(ee.Filter.inList('Updated Production Type',  ['GAS', 'O&G', 'OIL']))
.filterMetadata("Drill Type","equals","D"); 

var V_wells = Well
.filter(ee.Filter.inList('Updated Production Type',  ['GAS', 'O&G', 'OIL']))
.filterMetadata("Drill Type","equals","V"); 



var Well_List = ee.List([D_wells,V_wells, H_post2000, H_pre2000,U_post2000, U_pre2000 ]); 
var Well_List_names = ee.List(["D_wells", "V_wells", 'H_post2000', 'H_pre2000','U_post2000', 'U_pre2000']);





// add Layers 
// Map.addLayer(V_wells, {'color':pink}, "V_wells", 1, 0.3); 
// Map.addLayer(D_wells, {'color':lb}, "D_wells",1, 0.3); 
// Map.addLayer(H_post2000, {'color':yellow}, "H_post2000"); 
// Map.addLayer(H_pre2000, {'color':db}, "H_pre2000"); 

// Map.addLayer(U_pre2000, {'color':dg}, "U_pre2000", 1, 0.4); 
// Map.addLayer(U_post2000, {'color':lg}, "U_post2000", 1, 0.4); 


// count number of wells 
var well_count = function(fc){
  fc = ee.FeatureCollection(fc);
  var output = fc.aggregate_sum('Well Count');
  return ee.Number(output);
};

var count = Well_List.map(well_count);
print('Total well count by type'); print(Well_List_names.zip(count));

var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo',
  maxError: 10
});

// Define a save all join.
var saveAllJoin = ee.Join.saveAll({
  matchesKey: 'scenes',
});

var shaleplay_seg = shaleplay.union();// Map.addLayer(shaleplay_seg, {}, 'shaleplay_seg');
var intersectJoined = saveAllJoin.apply(V_wells ,shaleplay_seg,  spatialFilter);
var intersected = ee.FeatureCollection(ee.List(intersectJoined.first().get('scenes')));


Map.addLayer(V_wells, {'color':db}, "V_wells"); 
Map.addLayer(intersectJoined, {'color':yellow}, "intersectJoined"); 
Map.addLayer(intersected, {'color':dg}, "intersected"); 

// print('intersectJoined', well_count(intersectJoined)); // 
// print('intersected' , well_count(intersected)); //0 

// 4787/26225 pre 2000 H Wells in plays 
// 94654/119710 post 2000 H wells in plays

// print(well_count(intersected)); // 
print(well_count(intersectJoined)); //0 

