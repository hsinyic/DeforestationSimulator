/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    Pen10 = ee.FeatureCollection("ft:1xabXcdjDWY8PCYLjAO6zH07XTczWVKqGcNVVQI3Y"),
    Pen05 = ee.FeatureCollection("ft:1YZK7dCxaKKF5WneTc3hcNyB1ss6nVRkl818pf7zI"),
    Pen90 = ee.FeatureCollection("ft:1zaZ7Z6NB0aGX5IfFTvWrVe3BJA5YrbCBfP85Y5de"),
    Pen00 = ee.FeatureCollection("ft:13VBea1Xy9bPFVVOGRGFT5gDA-Q8lE803AbNQyU5m"),
    center = /* color: d63000 */ee.Geometry.Point([102.392578125, 4.390228926463396]),
    fusionTable = ee.FeatureCollection("ft:1S4EB6319wWW2sWQDPhDvmSBIVrD3iEmCLYB7nMM"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var malaysia = countries.filterMetadata('Country', 'equals', 'Malaysia');
var indonesia = countries.filterMetadata('Country', 'equals', 'Indonesia');
var PNG = countries.filterMetadata('Country', 'equals', 'Papua New Guinea');
var totalarea = malaysia.merge(indonesia).merge(PNG);




/***
 * Generates a regular grid using given bounds.
 */
var generateGrid = function(xmin, ymin, xmax, ymax, dx, dy) {
  var xx = ee.List.sequence(xmin, xmax, dx)
  var yy = ee.List.sequence(ymin, ymax, dy)

  var cells = xx.map(function(x) {
    return yy.map(function(y) {
      var x1 = ee.Number(x)
      var x2 = ee.Number(x).add(ee.Number(dx))
      var y1 = ee.Number(y)
      var y2 = ee.Number(y).add(ee.Number(dy))
      
      var coords = ee.List([x1, y1, x2, y2]);
      var rect = ee.Algorithms.GeometryConstructors.Rectangle(coords);
      return ee.Feature(rect)
    })
  }).flatten();

  return ee.FeatureCollection(cells);
}

/**
 * Covers geometry with a regular grid.
 */
var coverByGrid = function(geom, dx, dy) {
  var bounds = ee.Geometry(geom).bounds()
  var coords = ee.List(bounds.coordinates().get(0))
  var ll = ee.List(coords.get(0))
  var ur = ee.List(coords.get(2))
  var xmin = ll.get(0)
  var xmax = ur.get(0)
  var ymin = ll.get(1)
  var ymax = ur.get(1)
  
  return generateGrid(xmin, ymin, xmax, ymax, dx, dy).filterBounds(geom).map(function(c) { return ee.Feature(c).intersection(geom) })
}
// print('malaysia',malaysia);

var states = ee.FeatureCollection(malaysia);

Map.addLayer(ee.Image().paint(states, 1, 1), {}, 'Peninsula_outline')

print(malaysia);


// var areaDiff = function(feature) {
//   // Compute area in sq. km. directly from the geometry.
//   var area = feature.geometry().area().divide(1000 * 1000);
//   // Compute the differece between computed area and the area property.
//   // Return the feature with the squared difference set to the 'diff' property.
//   return ee.Feature(area);
// };

// // var filterPenn = ee.Number(Peninsula_outline
// //     .map(areaDiff)
// //     // Reduce to get the mean squared difference.
// //     .reduceColumns(ee.Reducer.mean(), ['diff'])
// //     .get('mean'))
// //     // Compute the square root of the mean square to get RMSE.
// //     .sqrt();

// // var test = ee.FeatureCollection(Peninsula_outline).map(areaDiff);
// // print(test)

var state = states.filter(ee.Filter.or(ee.Filter.eq('Soil', 'Mineral'))).geometry();
// // var state = states.select(0).geometry();


// // var islandsWithArea = islandsprep.map(function(f) {
// // return f.set('area', f.geometry().area(5))});
// // // addToMap(withArea);

// // var islands = islandsWithArea.filterMetadata('area', 'greater_than', resolution.multiply(resolution).multiply(numberofbands));
// // // addToMap(islands, {color: '900000'}, 'Big Islands');


// var Pennarea = Peninsula_outline.map(function(f) {
// return f.set('area', f.geometry().area(5))});
// // addToMap(withArea);

// var resolution = ee.Number(300); 
// var NewPenn = Pennarea.filterMetadata('area', 'greater_than', resolution.multiply(resolution));
// // addToMap(islands, {color: '900000'}, 'Big Islands');


var stateGrid = coverByGrid(Peninsula_outline, 3, 3)
Map.addLayer(stateGrid, {color:'222299'}, 'grid')

Map.centerObject(center, 6)



/*var input = image.eq(classes.get('forest')).multiply(ee.Image.pixelArea().divide(1000000))
*/
// 1 degree cells
// var area = stateGrid.map(function(c) {
//     return ee.Feature(null, 
//       input.reduceRegion({
//           reducer: ee.Reducer.sum(), 
//           geometry: ee.Feature(c).geometry(), 
//           scale: 30,
//           maxPixels: 1e9}))
//   })
// }).flatten()


