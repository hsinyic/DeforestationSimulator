/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var crop = ee.ImageCollection("USGS/NLCD"),
    country_simple = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017"),
    gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    geometry = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-91.699803029223, 39.5598737759322],
          [-92.007420216723, 31.67759240702587],
          [-79.966404591723, 31.640186688923322],
          [-78.823826466723, 40.50201462753847]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// define totalarea 
// var totalarea = country_simple.filterMetadata('country_co', 'equals', "US");
var totalarea = ee.FeatureCollection(geometry);
var totalarea_raster = totalarea.set("raster_convert",1)
totalarea_raster= totalarea_raster.reduceToImage({properties: ['raster_convert'],reducer: ee.Reducer.first()}); 
var totalarea_outline = totalarea.geometry().bounds();
Map.addLayer(totalarea)

Map.addLayer(totalarea_raster)

Map.addLayer(totalarea_outline)


//Import Hansen Global Data set 
var lossYear = gfcImage.select(['lossyear']).clip(totalarea_outline);
lossYear = lossYear.where(lossYear.eq(0), 99).add(2000);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea_outline);
var blank = ee.Image(0).rename(['blank']).clip(totalarea_outline);
// Map.addLayer(lossYear, {min: 2000, max: 2011,palette:[ '#ffffff', '#d1ee6c', 'ff510f','#fff832','#4cff62','#dcdcdc' , '#d51483', '#f7f7f7' ]}, 'lossYear');



var crop_only = function(imageCollect){
  var imagery = ee.Image(imageCollect.reduce(ee.Reducer.first()));
// var crop_test = ee.Image(imageCollect.first());
  var crop_binary = blank.where(imagery.eq(82), 1);
  return(ee.Image(crop_binary));
}


var crop1992=crop.select(0).filterMetadata('system:index', 'equals', 'NLCD1992');
var crop2001=crop.select(0).filterMetadata('system:index', 'equals', 'NLCD2001');
var crop2006= crop.select(0).filterMetadata('system:index', 'equals', 'NLCD2006');
var crop2011= crop.select(0).filterMetadata('system:index', 'equals', 'NLCD2011');

var OP90=crop_only(crop1992)
var OP00=crop_only(crop2001)
var OP05=crop_only(crop2006)
var OP10=crop_only(crop2011)
// Map.addLayer(OP90,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop1992 bef')
// Map.addLayer(OP00,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2001 bef')
// Map.addLayer(OP05,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2006 bef')
// Map.addLayer(OP10,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2011 bef')



// Map.addLayer(crop2006, {min: 1, max: 95,palette:[ '#ffffff', '#d1ee6c', 'ff510f','#fff832','#4cff62','#dcdcdc' , '#d51483', '#f7f7f7' ]}, 'crop2006');
// Map.addLayer(crop2001, {min: 1, max: 95,palette:[ '#ffffff', '#d1ee6c', 'ff510f','#fff832','#4cff62','#dcdcdc' , '#d51483', '#f7f7f7' ]}, 'crop2001');


var cropbands = ee.Image(crop_only(crop2006).rename(['crop2006'])
.addBands(crop_only(crop2011).rename(['crop2011']) ))
var diff= cropbands.expression(
' map2011- map2006',
    {  
      'map2011': cropbands.select('crop2011'),
      'map2006': cropbands.select('crop2006'),
    }
);
Map.addLayer(diff,{min: -1, max: 1,palette:[ '#ffffff','#d1ee6c', '#966969']},'diff')
  

OP00 = OP00.where(OP90.eq(1), 1);
OP05 = OP05.where(OP00.eq(1), 1);
OP10 = OP10.where(OP05.eq(1), 1);
// Map.addLayer(OP90,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop1992')
// Map.addLayer(OP00,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2001')
// Map.addLayer(OP05,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2006')
// Map.addLayer(OP10,{min: 0, max: 1,palette:[ '#d1ee6c','#966969']},'crop2011')






// ############
// # Step 3: Preliminary data processing 
// # 1) Buffer by field treatment 
// # 2) Create 2000 Basemap  
// ############

// ########
// # 1) 1990 to 2000 Buffer by field, 2000 to 2005 Buffer by field,2005 to 2010 Buffer by field 
// ########
// Set scale for buffering (e.g.,reduceRegion percentile operation)
var scale = ee.Number(30); 

var Designated90 = blank.where(OP90.eq(0).and(OP00.eq(1)), 1); 
var Designated00 = blank.where(
  (OP00.eq(0).and(OP05.eq(1)))
  .and(
    (lossYear.lte(2000)).or(lossYear.gt(2005)).or(lossYear.eq(99))), 1);
var Designated05 = blank.where(
  (OP05.eq(0).and(OP10.eq(1)))
  .and(
    (lossYear.lte(2005)).or(lossYear.gt(2010)).or(lossYear.eq(99))), 1);

var Target00 = ee.List([0, 0.2,0.4,0.6,0.8,1.0]);
var Target90 = ee.List([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]); 
var Target05 = ee.List([0,0.2,0.4,0.6,0.8,1.0]);

var source90 = OP90; source90 = source90.updateMask(source90);
var source00 = OP00; source00 = source00.updateMask(source00);
// var source00 = blank.where(totalarea_raster.neq(0),OP00); source00 = source00.updateMask(source00);
var source05 = OP05; source05 = source05.updateMask(source05);
Map.addLayer(source90, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source90');
Map.addLayer(source00, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source00');
Map.addLayer(source05, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source05');
Map.addLayer(totalarea_raster, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'totalarea_raster');



var years00 = ee.List.sequence(2001, 2005,1);
var years90 = ee.List.sequence(1991, 2000,1);
var years05  = ee.List.sequence(2006, 2010,1);

var buffer = function(Designated, Target,source, years ){
  var offset = ee.Number(years.get(0)).subtract(1);
  var cumulativeCost = ee.Image([1]).clip(totalarea_outline).cumulativeCost({source: source,maxDistance: 100 * 100 });
  var costmap = blank.where(Designated.eq(1), cumulativeCost);
  costmap = costmap.updateMask(costmap);
  var mincostmapping = function(t){
    t= ee.Number(t);
    var N_target = ee.Number(Target.get(t));
    var output = costmap.reduceRegion({
      reducer: ee.Reducer.percentile([t.multiply(100)]),
      geometry: totalarea,
      scale: scale,
      maxPixels: 12e9,
    });
    return ee.Number(output.get('blank'));
  };
  var threshold = Target.map(mincostmapping); 
  var execute = function(x, prev){
    x= ee.Number(x);
    prev = ee.Image(prev);
    var t=x.toInt();  
    var index =ee.Number(x).subtract(offset).toInt();
    var cuttoff = ee.Number(threshold.get(index)); 
    var cuttoff_before = ee.Number(
                  ee.Algorithms.If(index.gt(1), ee.Number(threshold.get(index.subtract(1).toInt())), ee.Number(0.0))
                  );
    var Binary = blank.
              where(costmap.lte(cuttoff).and(costmap.gt(cuttoff_before)), 1);
    var lossYear_update = prev.where(Binary.eq(1), t);
    return ee.Image(lossYear_update);
  };
  var map = ee.Image(years.iterate(execute, lossYear)); 
  return map;
};

var Hansen_update = buffer(Designated90, Target90,source90, years90); 
lossYear = Hansen_update;
Map.addLayer(lossYear.updateMask(lossYear.neq(2099)), {min: 1990, max: 2010, palette: ['ff510f','#fff832','#4cff62','#dcdcdc' ]}, 'simulated year of forest clearing1');

