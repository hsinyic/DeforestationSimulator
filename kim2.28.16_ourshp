/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: d63000 */ee.Geometry.MultiPoint(),
    Hansen = ee.Image("UMD/hansen/global_forest_change_2015");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Get just the Malaysia feature.

var treeCover = gfcImage.select(['treecover2000']);
var lossImage = gfcImage.select(['loss']);
var gainImage = gfcImage.select(['gain']);


var countries = ee.FeatureCollection('ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw');
var malaysia = countries.filterMetadata('Country', 'equals', 'Malaysia');

// Load up the oil palm concessions.
//multiple rows 
// var oilPalm = ee.FeatureCollection('ft:10jB93qe9kDIy6OSg-UMXYrjagAB4gUKhpy6ryt45', 'geometry');
//one row -- the second one is downloadable
// var oilPalm = ee.FeatureCollection('ft:1kIBUuiF7pqidZaX9qU-an6nV8hFVLOy-vOrQO5t1', 'geometry');
// var oilPalm = ee.FeatureCollection('ft:1lK4FuYO8OObrRQPGc8SsyhYjCtGO-siQLfWchHmf', 'geometry');

var oilPalm = ee.FeatureCollection('ft:10tX-aR20k-jOr2IT6A-MR1Br06GABwfUYvxKYMIX', 'geometry');

// Create a feature collection that is just oil palm concessions inside Malaysia.
var oilPalmInMalaysia = oilPalm.filterBounds(malaysia);

// Get forest cover in Malaysia.
var gfcImage = ee.Image('UMD/hansen/global_forest_change_2013');
var coverImage = gfcImage.select(['treecover2000']);

Map.addLayer(coverImage.clip(malaysia),
             {'min': 0, 'max': 100, 'palette': ['0000FF', '00FF00', '00FFFF', 'FF0000']},
             'Forest Cover 2000');
             
// Make an image out of the population attribute and display it.
var opRaster = oilPalmInMalaysia
  // .filter(ee.Filter.neq('cat_', null))
  .reduceToImage({
    properties: ['cat'],
    reducer: ee.Reducer.first()
});
//use first and not count 

Map.addLayer(opRaster, {min: 0, max: 1, palette: ['0000FF', '00FF00', '00FFFF', 'FF0000']}, 'Raster OP');
Map.addLayer(oilPalm, {min: 0, max: 1, palette: ['0000FF', '00FF00', '00FFFF', 'FF0000']}, 'Vector OP');



// Export the image, specifying scale and region.
Export.image(opRaster, 'exportImageExample', {
  scale: 30,
  region: geometry
});

