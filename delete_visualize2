/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var in05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/In50"),
    ma00 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M00"),
    ma05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M05"),
    ma10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M10"),
    ma90 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M90"),
    in90 = ee.FeatureCollection("ft:1uapqckPRK25yVUFpULpdj2T0Y528VisRUSNIWhOL"),
    gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen90 = ee.FeatureCollection("ft:1K7c9xfnLUFeZtjEOJOGj8YCzuTwdbSSSULfrvABW"),
    Pen00 = ee.FeatureCollection("ft:1OOZFXx64egEda93Q8LfBUIJ6n_Ecl97XsHk5hfvc"),
    Pen05 = ee.FeatureCollection("ft:1gizVspGHIjdwL9P-piLzYV-_DXJ7AvuIky2IBBQ_"),
    in00 = ee.FeatureCollection("ft:1oNZXmk6ETcE9UBhaLLs7WRRImV6AcdTchYPfIj0f"),
    Pen10 = ee.FeatureCollection("ft:1s1sLCzufbyP4TdfqOysEo8w5eclnFbEQ8IqLYHlm"),
    in10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/In10"),
    country_simple = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017"),
    country_detailed = ee.FeatureCollection("USDOS/LSIB/2013");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// var ma00 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M00"),
//     ma05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M05"),
//     ma10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M10"),
//     ma90 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/M90"),
//     in90 = ee.FeatureCollection("ft:1uapqckPRK25yVUFpULpdj2T0Y528VisRUSNIWhOL"),
//     in00 = ee.FeatureCollection("ft:1oNZXmk6ETcE9UBhaLLs7WRRImV6AcdTchYPfIj0f"),
//     in05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/In50"),
//     in10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/In10"),
//     gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
//     Pen90 = ee.FeatureCollection("ft:1K7c9xfnLUFeZtjEOJOGj8YCzuTwdbSSSULfrvABW"),
//     Pen00 = ee.FeatureCollection("ft:1OOZFXx64egEda93Q8LfBUIJ6n_Ecl97XsHk5hfvc"),
//     Pen05 = ee.FeatureCollection("ft:1gizVspGHIjdwL9P-piLzYV-_DXJ7AvuIky2IBBQ_"),
//     Pen10 = ee.FeatureCollection("ft:1s1sLCzufbyP4TdfqOysEo8w5eclnFbEQ8IqLYHlm"),
//     country_simple = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017"),
//     country_detailed = ee.FeatureCollection("USDOS/LSIB/2013");



var add_cat_label=  function(feature){
  feature = ee.Feature(feature);
  var number = ee.Number(1);
  return(ee.Feature(feature).set("cat",number )
  );
};
in05 = ee.FeatureCollection(in05).map(add_cat_label);
in10 = ee.FeatureCollection(in10).map(add_cat_label);
ma90 = ee.FeatureCollection(ma90).map(add_cat_label);
ma05 = ee.FeatureCollection(ma05).map(add_cat_label);
ma00 = ee.FeatureCollection(ma00).map(add_cat_label);
ma10 = ee.FeatureCollection(ma10).map(add_cat_label);









var scale = ee.Number(1000); 

// Define Region of Interest  
var Indonesia_1 = ee.FeatureCollection('ft:1BIvH58CL17YCBkZe4Nmb3m27Ngcl2f-w-oB8zWzk', 'geometry');
var addprovinces = function(name, prev){
  name = ee.String(name);
  prev = ee.FeatureCollection(prev);
  return ee.FeatureCollection(prev
          .merge(Indonesia_1.filterMetadata('NAME_2', 'equals', name)));
};
print(Indonesia_1);
    // area_notworking: R1, R2 splits the province Riau, and doesn't work 
var R1 =  ee.List(['Indragiri Hulu','Kuantan Singingi' ])
          .iterate(addprovinces, Indonesia_1.filterMetadata('NAME_2', 'equals', 'Indragiri Hilir'));
var R2  =  ee.List(['Rokan Hilir','Bengkalis', 'Dumai'])//,'Dumai','Siak'])
          .iterate(addprovinces, Indonesia_1.filterMetadata('NAME_2', 'equals','Rokan Hulu' ));
var R3  =  ee.List(['Siak', 'Kampar', 'Pelalawan'])
          .iterate(addprovinces, Indonesia_1.filterMetadata('NAME_2', 'equals','Pekan Baru' ));
    // area_working: works, and is a bigger area 
var Jambi = Indonesia_1.filterMetadata('NAME_1', 'equals', 'Jambi'); 
var Sumatra_Barat = Indonesia_1.filterMetadata('NAME_1', 'equals', 'Sumatera Barat'); 


var Malaysia = country_simple.filterMetadata('country_co', 'equals', "MY");
var Indonesia = country_simple.filterMetadata('country_co', 'equals', "ID");
var PapuaNewGuinea = country_simple.filterMetadata('country_co', 'equals', "PP");
var MIP = country_simple.filter(ee.Filter.inList('country_co', ['PP', 'ID', 'MY']))





    // define totalarea 
var totalarea = ee.FeatureCollection(Malaysia);
var totalarea_raster = totalarea.reduceToImage({properties: ['ID_0'],reducer: ee.Reducer.first()}); // for Indonesia_1
var totalarea_outline = totalarea.geometry().bounds();


//Import Hansen Global Data set 
var lossYear = gfcImage.select(['lossyear']).clip(totalarea_outline);
lossYear = lossYear.where(lossYear.eq(0), 99).add(2000);
var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea_outline);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea_outline);


//Import Vector Data and convert to Raster 
var convert_to_image = function(feature){
  feature = ee.FeatureCollection(feature);
  return feature.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
};
var concatenate = function(map, prev){
  map = ee.Image(map);
  prev = ee.Image(prev);
  return ee.Image(prev.where(map.eq(1),1));
};
var layer90 = ee.List([Pen90, ma90,in90]).map(convert_to_image);
var layer00 = ee.List([Pen00, ma00,in00]).map(convert_to_image);
var layer05 = ee.List([Pen05, ma05,in05]).map(convert_to_image);
var layer10 = ee.List([Pen10, ma10,in10]).map(convert_to_image);
var OP90 = ee.Image(layer90.iterate(concatenate, blank)).rename(['OP90']);
var OP00 = ee.Image(layer00.iterate(concatenate, blank)).rename(['OP00']);
var OP05 = ee.Image(layer05.iterate(concatenate, blank)).rename(['OP05']);
var OP10 = ee.Image(layer10.iterate(concatenate, blank)).rename(['OP10']);
OP00 = OP00.where(OP90.eq(1), 1);
OP05 = OP05.where(OP00.eq(1), 1);
OP10 = OP10.where(OP05.eq(1), 1);
Map.addLayer(OP10.updateMask(OP10), {min: 0, max: 1,palette:[ '#f7f7f7', '#966969' ]}, "Oil Palm 2010");
Map.addLayer(OP05.updateMask(OP05), {min: 0, max: 1,palette:[ '#f7f7f7', '#c38888' ]}, "Oil Palm 2005");
Map.addLayer(OP00.updateMask(OP00), {min: 0, max: 1,palette:[ '#f7f7f7', '#ffb3b3' ]}, "Oil Palm 2000");
Map.addLayer(OP90.updateMask(OP90), {min: 0, max: 1,palette:[ '#f7f7f7', '#ffd6d6' ]}, "Oil Palm 1990");


// Export.image.toAsset({
//   image: OP90.clip(MIP),
//   description: "OP90",
//   scale: 30,
//   region: MIP.geometry().bounds(),
//   maxPixels: 1e13
// });

// Export.image.toAsset({
//   image: OP00.clip(MIP),
//   description: "OP00",
//   scale: 30,
//   region: MIP.geometry().bounds(),
//   maxPixels: 1e13
// });

// Export.image.toAsset({
//   image: OP05.clip(MIP),
//   description: "OP05",
//   scale: 30,
//   region: MIP.geometry().bounds(),
//   maxPixels: 1e13
// });

// Export.image.toAsset({
//   image: OP10.clip(MIP),
//   description: "OP10",
//   scale: 30,
//   region: MIP.geometry().bounds(),
//   maxPixels: 1e13
// });



 

// ########
// # Load Hansen of lossYear, perform speckle filtering and majority sampling 
// ########
var binary_pre = blank.where(OP90.eq(1).and(OP10.eq(1)), 1).where((OP90.eq(0)).and(OP10.eq(1)),2 );
var binary = blank.where(totalarea_raster.neq(0),binary_pre).clip(totalarea_outline);
//Expansion
var lossYear_expand = lossYear.neq(2099); // make it binary 
lossYear_expand = lossYear_expand.where(lossYear_expand.connectedPixelCount(128).lte(64), 0); 
lossYear_expand = lossYear.where(lossYear_expand.neq(1), 2099);
//Replant 
var lossYear_replant = ee.Image([2099]).clip(totalarea_outline).where(lossYear.neq(2099).updateMask(OP10.neq(0)), lossYear.divide(2).ceil().multiply(2).toInt());
lossYear_replant =lossYear_replant.min(lossYear_replant.focal_mode(10, 'square'));
lossYear_replant= lossYear_replant.where(lossYear_replant.connectedPixelCount(256).lte(16), 2099);
//Final assembling 
var lossYear_final = lossYear.where(binary.eq(1), lossYear_replant).where(binary.eq(2),lossYear_expand);
lossYear = lossYear_final; 
Map.addLayer(lossYear_final.updateMask(lossYear_final.neq(2099)).updateMask(OP10.neq(0)), {min: 2000, max: 2014,
    palette:[ 'ff510f','#fff832','#4cff62','0000FF']}, 'lossYear final');



// ############
// # Step 3: Preliminary data processing 
// # 1) Buffer by field treatment 
// # 2) Create 2000 Basemap  
// ############

// ########
// # 1) 1990 to 2000 Buffer by field, 2000 to 2005 Buffer by field,2005 to 2010 Buffer by field 
// ########
// Set scale for buffering (e.g.,reduceRegion percentile operation)
var scale = ee.Number(1000); 

var Designated90 = blank.where(OP90.eq(0).and(OP00.eq(1)), 1); 
var Designated00 = blank.where(
  (OP00.eq(0).and(OP05.eq(1)))
  .and(
    (lossYear.lte(2000)).or(lossYear.gt(2005)).or(lossYear.eq(99))), 1);
var Designated05 = blank.where(
  (OP05.eq(0).and(OP10.eq(1)))
  .and(
    (lossYear.lte(2005)).or(lossYear.gt(2010)).or(lossYear.eq(99))), 1);

var Target00 = ee.List([0, 0.2,0.4,0.6,0.8,1.0]);
var Target90 = ee.List([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]); 
var Target05 = ee.List([0,0.2,0.4,0.6,0.8,1.0]);

var source90 = blank.where(totalarea_raster.neq(0),OP90); source90 = source90.updateMask(source90);
var source00 = blank.where(totalarea_raster.neq(0),OP00); source00 = source00.updateMask(source00);
var source05 = blank.where(totalarea_raster.neq(0),OP05); source05 = source05.updateMask(source05);
Map.addLayer(source90, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source90');
Map.addLayer(source00, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source00');
Map.addLayer(source05, {min: 0, max: 1, palette: ['#fff832','#4cff62' ]}, 'source05');


var years00 = ee.List.sequence(2001, 2005,1);
var years90 = ee.List.sequence(1991, 2000,1);
var years05  = ee.List.sequence(2006, 2010,1);

var buffer = function(Designated, Target,source, years ){
  var offset = ee.Number(years.get(0)).subtract(1);
  var cumulativeCost = ee.Image([1]).clip(totalarea_outline).cumulativeCost({source: source,maxDistance: 100 * 1000 });
  var costmap = blank.where(Designated.eq(1), cumulativeCost);
  costmap = costmap.updateMask(costmap);
  var mincostmapping = function(t){
    t= ee.Number(t);
    var N_target = ee.Number(Target.get(t));
    var output = costmap.reduceRegion({
      reducer: ee.Reducer.percentile([t.multiply(100)]),
      geometry: totalarea,
      scale: scale,
      maxPixels: 12e9,
    });
    return ee.Number(output.get('blank'));
  };
  var threshold = Target.map(mincostmapping); 
  var execute = function(x, prev){
    x= ee.Number(x);
    prev = ee.Image(prev);
    var t=x.toInt();  
    var index =ee.Number(x).subtract(offset).toInt();
    var cuttoff = ee.Number(threshold.get(index)); 
    var cuttoff_before = ee.Number(
                  ee.Algorithms.If(index.gt(1), ee.Number(threshold.get(index.subtract(1).toInt())), ee.Number(0.0))
                  );
    var Binary = blank.
              where(costmap.lte(cuttoff).and(costmap.gt(cuttoff_before)), 1);
    var lossYear_update = prev.where(Binary.eq(1), t);
    return ee.Image(lossYear_update);
  };
  var map = ee.Image(years.iterate(execute, lossYear)); 
  return map;
};

var Hansen_update = buffer(Designated90, Target90,source90, years90); 
lossYear = Hansen_update;
Map.addLayer(lossYear.updateMask(lossYear.neq(2099)), {min: 1990, max: 2010, palette: ['ff510f','#fff832','#4cff62','#dcdcdc' ]}, 'simulated year of forest clearing1');



Hansen_update = buffer(Designated00, Target00,source00, years00); 
lossYear = Hansen_update; 
Map.addLayer(lossYear.updateMask(lossYear.neq(2099)), {min: 1990, max: 2010, palette: ['ff510f','#fff832','#4cff62','#dcdcdc' ]}, 'simulated year of forest clearing2');


Hansen_update = buffer(Designated05, Target05,source05, years05); 
lossYear = Hansen_update; 

Map.addLayer(lossYear.updateMask(lossYear.neq(2099)), {min: 1990, max: 2010, palette: ['ff510f','#fff832','#4cff62','#dcdcdc' ]}, 'simulated year of forest clearing');


// ########
// # 2) Create year_2000 land use clasfficiation  
// ########

var Gunarso = ee.Image([lossYear,OP90, OP00, OP05,OP10, treecover2000,blank]);
// code NF, F, OPR, OP into numbers 
var NF_color = ee.Number(1);
var F_color = ee.Number(2);
var OPReplant_color = ee.Number(3); 
var OP_color = ee.Number(4); 
var NOP_color = ee.Number(5);
var OTH_color = ee.Number(6);

// Create year_2000 classified layer of OP, F, NF  
var year_2000 = Gunarso.expression(
'(OP00 ==1)? OP\
  :((OP00==0) && treecover2000>=30)? F\
    :((OP00==0)&& treecover2000<30)? NF\
      :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OP00': Gunarso.select('OP00'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2000']);


// #########################a
// #Step4 : Land use classifications,  2000 to 2010 
// #########################
var Gunarso_intermediate = ee.Image([lossYear,year_2000, blank, OP00, OP05, OP10, OP90]);
var yr = ee.List.sequence(2000, 2010, 1);
var annual = function(t){
  t= ee.Number(t);
  var executeOP_OP = Gunarso_intermediate.expression(
  'lossYear==t && OP90 == 1 ? OPR\
    :lossYear==t && OP90 == 0 ? OP\
    :(lossYear>t || lossYear<t) ? OP\
    : OTH',
      {  
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'OPR': Gunarso_intermediate.select('blank').add(OPReplant_color),
        'lossYear': Gunarso_intermediate.select('lossyear'),
        'OP90': Gunarso_intermediate.select('OP90'),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        't': t,
      }
  );

  var executeNOP_OP = Gunarso_intermediate.expression(
    'lossYear>t ? basemap\
        : lossYear<=t? OP\
          :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': Gunarso_intermediate.select('lossyear'),
        'basemap': Gunarso_intermediate.select('year_2000'),
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var executeNOP_NOP = Gunarso_intermediate.expression(
  ' basemap==F_color && (lossYear>t || lossYear==2099)? F\
    :basemap==F_color && (lossYear<=t && lossYear<2099)? NF\
          :basemap==NF_color ? NF\
            :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': Gunarso_intermediate.select('lossyear'),
        'basemap': Gunarso_intermediate.select('year_2000'),
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var yearmap = blank
  .where(OP00.eq(1).and(OP10.eq(1)),executeOP_OP)
  .where(OP00.eq(0).and(OP10.eq(1)),executeNOP_OP)
  .where(OP00.eq(0).and(OP10.eq(0)),executeNOP_NOP);
  
  var final_yearmap = blank.where(totalarea_raster.neq(0), yearmap);
  return ee.Image(final_yearmap);
};
var Gunarso = yr.map(annual);


var printclass2 = function(t){
  var year = t.toString();
  t= ee.Number(t).subtract(2000); 
  var img = ee.Image(Gunarso.get(t)); 
  Map.addLayer(img.selfMask(), {min: 0, max: 5,
    palette:[ '#ffffff', '#d1ee6c', '#51612e',  '#51612e', '#d51483', '#f7f7f7', ]}, year);
};

printclass2(2009);


var printclass = function(t){
  var year = t.toString();
  t= ee.Number(t).subtract(2000);
  var img = ee.Image(Gunarso.get(t));
  var layer = ui.Map.Layer(img.selfMask(), {min: 0, max: 5,
    palette:[ '#ffffff', '#d1ee6c', '#51612e',  '#51612e', '#d51483', '#f7f7f7', ]}, year);
    Map.layers().set(0, layer);
};



var slider = ui.Slider();
slider.setMax(2010);
slider.setMin(1990);
slider.setStep(1);

slider.setValue(2005);  // Set a default value.
slider.onChange(printclass);
slider.style().set(
  {
  width: '300px',
  padding: '10px',
  position: 'bottom-right'
    
  });
Map.add(slider.setValue(2005));



var legend = ui.Panel({style: {position: 'bottom-left'}});
legend.add(ui.Label({
  value: "land use class",
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0px'
  }
}));

var color_list = ee.List(['#d1ee6c', '#51612e', '#d51483'])

var class_names = ee.List(['other use', 'forest', 'agriculture']);
var entry;
for (var x = 0; x<3; x++){
  entry = [
    ui.Label({style:{color:color_list.get(x).getInfo(), margin: '0 0 4px 0'}, value: '██'}),
    ui.Label({
      value: class_names.get(x).getInfo(),
      style: {
        margin: '0 0 4px 4px'
      }
    })
  ];
  legend.add(ui.Panel(entry, ui.Panel.Layout.Flow('horizontal')))
}

Map.add(legend);

var legend2 = ui.Panel({style: {position: 'middle-left'}});
legend2.add(ui.Label({
  value: "cropland map",
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0px'
  }
}));

var color_list2 = ee.List(['#966969', '#c38888','#ffb3b3','#ffd6d6' ])

var class_names2 = ee.List(['2010', '2005', '2000', '1990']);
var entry2;
for (var x = 0; x<4; x++){
  entry2 = [
    ui.Label({style:{color:color_list2.get(x).getInfo(), margin: '0 0 4px 0'}, value: '██'}),
    ui.Label({
      value: class_names2.get(x).getInfo(),
      style: {
        margin: '0 0 4px 4px'
      }
    })
  ];
  legend2.add(ui.Panel(entry2, ui.Panel.Layout.Flow('horizontal')))
}

Map.add(legend2);