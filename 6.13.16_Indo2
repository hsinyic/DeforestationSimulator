/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    Pen10 = ee.FeatureCollection("ft:1cwFEmRV89tF2QxGZCQWH3o_Fn7PSfPVLpp1Djp05"),
    Pen90 = ee.FeatureCollection("ft:17sNwA_Hb3XB2XO5wDVOjUpRQ8RkoAQsL4m6XQHNL"),
    Pen00 = ee.FeatureCollection("ft:1NJ3I0Rt6gvHK1C90DMZV30KQfhQyBjJkJ6R_tW0O"),
    Pen05 = ee.FeatureCollection("ft:1PCQ6vmmijAn_MjfovMmxvBOr1UtcsZEemujetqft"),
    ma90 = ee.FeatureCollection("ft:1ClQZOLYbgQUpFlaj-IEM0H-HCYH2qgWB0IMgw67s"),
    ma10 = ee.FeatureCollection("ft:1qnUbN9G35ty03brJzVL_bvwur5r0CrAORkHwZSak"),
    ma05 = ee.FeatureCollection("ft:1_TjOWmEO3IJviMvrPnpmSf6-X3tbBCNg0rW8MZOb"),
    ma00 = ee.FeatureCollection("ft:1dZpd04fr-TNZV_5BlsT6GgmDHXTLqoDwH4jg59vX"),
    in00 = ee.FeatureCollection("ft:1UmFrgy4IPk2vAuqoQ84uLUoo87p03H81yq9fS4_L"),
    in05 = ee.FeatureCollection("ft:1NbhFw2CTXFSDK-DM45fWhiPT05iUWaMATGQJysin"),
    in10 = ee.FeatureCollection("ft:13TMkrpp7qsuJnbY1GsOEx4UkUQCrnJlgo2XuVcC2"),
    in90 = ee.FeatureCollection("ft:1dQMQUMmiArzbIAyqSdMzDfZpxyBI75uS0g1rOlru"),
    Peninsula_outline = ee.FeatureCollection("ft:1qXLCkXAj4shgixeHmj-yDVAYrVhtkF2iJ94OBp3N"),
    geometry = /* color: 98ff00 */ee.Geometry.Polygon(
        [[[102.15225219726562, 4.136873372175124],
          [102.14744567871094, 3.6244418715038584],
          [103.2000732421875, 3.6593900720416443],
          [103.08952331542969, 4.127970187726043]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Map.setCenter(102.10693359375, 3.973860975839102, 9);
Map.setCenter(102.59239196777344,3.94029555672408, 11);

var scale = ee.Number(500); 
var totalarea = geometry;
var lossYear = gfcImage.select(['lossyear']).clip(totalarea);
lossYear = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
lossYear =lossYear.min(lossYear.focal_mode(50, 'square'));
lossYear = lossYear.toInt();

var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea);
var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea);

// NOT IMPORTANT add name string for colors, so I don't have to input the colors   
var db= ('0000FF').toString();
var lb= ('#11ffff').toString();
var red=('ff510f').toString();
var lr = ('#ff8f7d').toString();
var yellow=('#fff832').toString();
var gr= ('#4cff62').toString();
var whi=('#f7f7f7').toString();
var black = ('#101010').toString();
// NOT IMPORTANT  Data Processing 
var OP90_raster = Pen90.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP00_raster = Pen00.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP05_raster = Pen05.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP10_raster = Pen10.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()}).multiply(0).add(1);
var OP90 = blank.where(OP90_raster.eq(1), 1).rename(['OP90']);
var OP00 = blank.where(OP00_raster.eq(1), 1).where(OP90_raster.eq(1), 1).rename(['OP00']);
var OP05 = blank.where(OP05_raster.eq(1), 1).where(OP00_raster.eq(1), 1).rename(['OP05']);
var OP10 = blank.where(OP10_raster.eq(1), 1).where(OP05_raster.eq(1), 1).rename(['OP10']);
/*Map.addLayer(OP10.updateMask(OP10), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP10");
Map.addLayer(OP00.updateMask(OP00), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP00");
Map.addLayer(OP05.updateMask(OP05), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP05");
Map.addLayer(OP90.updateMask(OP90), {min: 0, max: 1,
    palette:[whi, lb ]}, "OP90");

*/

// Define parameters 
var lossYear1 = lossYear.where(lossYear.eq(0), 99).clip(totalarea);
var Designated = blank.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), 1).clip(totalarea); 
var Target = ee.List([0, 0.2,0.4,0.6,0.8,1.00]);
//Minimum cost mapping 
var source = OP00;
source = source.updateMask(source);
var cost = blank.add(1).clip(totalarea); 
var cumulativeCost = cost.cumulativeCost({
    source: source,
    maxDistance: 100 * 1000 // 50 kilometers
  });
var costmap = blank.where(Designated.eq(1), cumulativeCost);
costmap = costmap.updateMask(costmap);
/*Map.addLayer(source, {min: 0, max: 5e3,
    palette:[db, lb, gr, yellow, red, whi  ]}, "source");
Map.addLayer(cumulativeCost, {min: 0, max: 5e4,
    palette:[db, lb, gr, yellow, red, whi  ]}, "cumulativeCost");
Map.addLayer(costmap, {min: 0, max: 5e4,
    palette:[db, lb, gr, yellow, red, whi  ]}, "costmap");
*/
//Get a series of threshold corresponding to the percentage 
var mincostmapping = function(t){
  t= ee.Number(t);
  var N_target = ee.Number(Target.get(t));
  // print(N_target);
  var output = costmap.reduceRegion({
    reducer: ee.Reducer.percentile([t.multiply(100)]),
    geometry: totalarea,
    scale: scale
  });
  // print(output);
  return ee.Number(output.get('blank'));
};
var threshold = Target.map(mincostmapping);
// print(threshold);
// Update Hansen lossyear layer  
var execute = function(x){
  x=ee.Number(x).toInt();
  // print(x);
  var cuttoff = ee.Number(threshold.get(x));
  var cuttoff_before = ee.Algorithms.If(x.gt(1), ee.Number(threshold.get(x.subtract(1).toInt())), ee.Number(0.0));
  // print('year', x, cuttoff_before, cuttoff );
  var Binary = blank.where(costmap.lte(ee.Number(cuttoff)).and(costmap.gt(ee.Number(cuttoff_before))), 1).clip(totalarea);
// print(Binary);
  var lossYear_update = lossYear.where(Binary.eq(1), ee.Number(x));
  var Binary_show = blank.where(Binary.eq(1), ee.Number(x));
// Map.addLayer(Binary_show.updateMask(Binary_show), {min: 0, max: 5, palette: [whi, yellow, red, lb, db]}, 'Binary');
  return lossYear_update;
};
// var x=0;
// lossYear = execute(x);
var x=1;
lossYear = execute(x);
x=2;
lossYear = execute(x);
x=3;
lossYear = execute(x);
x=4;
lossYear = execute(x);
x=5;
lossYear = execute(x);

//you should set minimum and maximum 
// Try to use iterate() 
/*var placeholder = ee.Number(50);
var lossYear_2= lossYear.where(lossYear.eq(0), 99);
lossYear_2 = lossYear_2.where(OP00.eq(0).and(OP05.eq(1)).and(lossYear1.gt(5)), placeholder) ;
var lossYear_update = function(list, prevlossYear) {
    var cuttoff = ee.Number(list);
    // print(cuttoff);
    // Need to get the previous element on the list 
    // var cuttoff_before = ee.Number(list.get(-1));
    // print(cuttoff_before);
    prevlossYear = ee.Image(prevlossYear); 
    var lossYear_update = prevlossYear.where(costmap.lte(cuttoff).and(prevlossYear.eq(50)), x );
    return ee.Image(lossYear_update);
};

var iterate = threshold.iterate(lossYear_update, lossYear1);
print(iterate);

var list_iterate = function(list, prev){
  var A = ee.Number(list); // should be 1,3,5,7,9,11
  var B = ee.Number(list.get(-1)); // should be  1,3,5,7,9,11
  prev = ee.Image(prev);
  return ee.Image(blank.where(lossYear.lte(A).and(lossYear.gte(B),1)));
};

var list = ee.List([1,3,5,7,9,11]);
var list_lag = ee.List([0, 2, 2, 2, 2, 2])
//where it has not been labeled with the right kind, do it!!! 
var result = list.iterate(list_iterate, lossYear)

*/

// ####################
// # Step 2: Intermediate output for 1990-2000, 2000-2005, 2005-2010 
// ####################
var Gunarso = ee.Image([lossYear,OP90, OP00, OP05,OP10, treecover2000,blank]);
//Define transition variables
var NOP_NOP= 1;//NonOP to NonOP 
var NOP_OP= 2;//NonOP to OP
var OP_NOP= 3;//OP to NonOP
var OP_OP= 4;//OP to OP

// print('here2');


var OP_00_05 = Gunarso.expression(
    "(OP2000==1 && OP2005==1) ? OP_OP \
      : (OP2000==1 && OP2005==0) ? OP_NOP \
        :(OP2000==0 && OP2005==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2000': Gunarso.select('OP00'),
        'OP2005': Gunarso.select('OP05'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_00_05']);
var OP_05_10 = Gunarso.expression(
  "(OP2005==1 && OP2010==1) ? OP_OP\
      : (OP2005==1 && OP2010==0) ? OP_NOP \
        :(OP2005==0 && OP2010==0) ? NOP_NOP \
          : NOP_OP", 
        {
        'OP2005': Gunarso.select('OP05'),
        'OP2010': Gunarso.select('OP10'),
        'OP_OP': Gunarso.select('blank').add(OP_OP),
        'OP_NOP': Gunarso.select('blank').add(OP_NOP),
        'NOP_NOP': Gunarso.select('blank').add(NOP_NOP),
        'NOP_OP': Gunarso.select('blank').add(NOP_OP),
        }
    ).rename(['OP_05_10']);
// Map.addLayer(OP_00_05.clip(totalarea), {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'OP_00_05');
// Map.addLayer(OP_05_10.clip(totalarea), {min: 0, max: 4, palette: [whi, gr, lr, red, red]}, 'OP_05_10');


// ############
// # Step 3: Preliminary data processing 
// # 1) Create 2000/2005 Basemap  
// # 2) Mark inconsistencies for "NOP>OP, but no lossevents in between"
// # 3) Append the categorical maps, basemaps, and new lossyear layers 
// #    (00-05, 05-10) to Gunarso_intermediate band
// ############

// code NF, F, OPR, OP into numbers 
var NF_color = 1;
var F_color = 2;
var OPReplant_color = 3; 
var OP_color = 4; 
var OTH_color = 5;
// Create year_2000 and year_2005 classified layer of OP, F, NF  
var year_2000 = Gunarso.expression(
'(OP00 ==1)? OP\
  :((OP00==0) && treecover2000>=30)? F\
    :((OP00==0)&& treecover2000<30)? NF\
      :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OP00': Gunarso.select('OP00'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2000']);
var year_2005 = Gunarso.expression(
'(OP05 ==1)? OP\
  :( OP00==1&& OP05==0)? OTH2\
  :( OP00==0&& OP05==0 && treecover2000<30)? NF\
    :( OP00==0 && OP05==0 && treecover2000>=30 && lossYear==0)? F\
    :( OP00==0 && OP05==0 && treecover2000>=30 && lossYear>5)? F\
    :( OP00==0 && OP05==0 && treecover2000>=30 && lossYear<=5 )? NF\
        :OTH',
    {  
      'OP': Gunarso.select('blank').add(OP_color),
      'F': Gunarso.select('blank').add(F_color),
      'NF': Gunarso.select('blank').add(NF_color),
      'OTH': Gunarso.select('blank').add(OTH_color),
      'OTH2': Gunarso.select('blank').add(6),
      'lossYear': Gunarso.select('lossyear'),
      'OP00': Gunarso.select('OP00'),
      'OP05': Gunarso.select('OP05'),
      'treecover2000': Gunarso.select('treecover2000')
    }
).rename(['year_2005']);
// print('year_2005',year_2005);
    // Map.addLayer(year_2005, {min: 0, max: 6,
    // palette:[db, lb, gr, yellow, red, whi, black ]},'year_2005');


//Create separate lossyear00_05 and lossyear05_10
Gunarso= Gunarso.addBands([OP_00_05, OP_05_10]);
var lossyear00_05= Gunarso.expression(
' OP_00_05== NOP_OP && (lossyear >5 || lossyear==0) ? orphan\
  :lossyear',
    {  
      'OP_00_05': Gunarso.select('OP_00_05'),
      'lossyear': Gunarso.select('lossyear'),
      'orphan': Gunarso.select('blank').add(3),
      'NOP_OP': NOP_OP
    }
).rename(['lossyear00_05']);
// var inconsistent = lossyear00_05.eq(33); 
// Map.addLayer(inconsistent, {min: 0, max: 1,
// palette:[db, lb, gr, yellow, red, whi, black ]},'lossyear00_05');

var lossyear05_10= Gunarso.expression(
' OP_05_10==NOP_OP && (lossyear >10 || lossyear <=5) ? orphan\
  :lossyear',
    {  
      'OP_05_10': Gunarso.select('OP_05_10'),
      'lossyear': Gunarso.select('lossyear'),
      'orphan': Gunarso.select('blank').add(33),
      'NOP_OP': NOP_OP
    }
).rename(['lossyear05_10']);
// var inconsistent1 = lossyear05_10.eq(33); 
// Map.addLayer(inconsistent1.updateMask(inconsistent), {min: 0, max: 1,
// palette:[db, lb, gr, yellow, red, whi, black ]},'lossyear05_10');



// #########################
// #Step4 : Create yearly maps (stored in Gunarso_final),  2000 <= t <= 2005
// #########################
var Gunarso_intermediate = ee.Image([lossYear]);
Gunarso_intermediate= Gunarso_intermediate.addBands([year_2000, year_2005, blank, OP_00_05, OP_05_10, lossyear05_10,lossyear00_05]);
var Gunarso_final =ee.Image([lossYear,year_2000]);

var yr = ee.List.sequence(0, 10, 1);

var annual = function(t){
  t= ee.Number(t);
  var lossyear = ee.Algorithms.If(t.gt(5), lossyear05_10 , lossyear00_05);
  var basemap = ee.Algorithms.If(t.gt(5), year_2005, year_2000);
  var executeOP_OP = Gunarso_intermediate.expression(
  'lossYear==t ? OPR\
    :(lossYear>t || lossYear<t) ? OP\
    : OTH',
      {  
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'OPR': Gunarso_intermediate.select('blank').add(OPReplant_color),
        'lossYear': lossyear,
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        't': t,
      }
  );

  var executeNOP_OP = Gunarso_intermediate.expression(
    'lossYear>t && basemap==F_color? F\
      : lossYear>t && basemap==NF_color?NF\
        : lossYear<=t? OP\
          :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'OP': Gunarso_intermediate.select('blank').add(OP_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': lossyear,
        'basemap': basemap,
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  var executeNOP_NOP = Gunarso_intermediate.expression(
  ' basemap==F_color && (lossYear>t || lossYear==0)? F\
    :basemap==F_color && (lossYear<=t && lossYear>0)? NF\
          :basemap==NF_color ? NF\
            :OTH',
      {  
        'F': Gunarso_intermediate.select('blank').add(F_color),
        'NF': Gunarso_intermediate.select('blank').add(NF_color),
        'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
        'lossYear': lossyear,
        'basemap': basemap,
        't': t,
        'NF_color': NF_color,
        'F_color': F_color
      }
  );
  // individual yearmap classifications  
  var yearmap00_05= blank
  .where(OP_00_05.eq(4),executeOP_OP)
  .where(OP_00_05.eq(2),executeNOP_OP)
  .where(OP_00_05.eq(1),executeNOP_NOP);
  // print(yearmap00_05);
  
  var yearmap05_10 = blank
  .where(OP_05_10.eq(4),executeOP_OP)
  .where(OP_05_10.eq(2),executeNOP_OP)
  .where(OP_05_10.eq(1),executeNOP_NOP);
  var yearmap = ee.Algorithms.If(t.gt(5), yearmap05_10, yearmap00_05);
  return ee.Image(yearmap).clip(totalarea);
};
var Gunarso = yr.map(annual);
// print('Annual Classification Maps, 2000-2010', Gunarso);

/*var test = annual(6);
print('test', test);
    Map.addLayer(test, {min: 0, max: 5,
    palette:[db, lb, gr, yellow, red, whi ]}, "test");
*/


// for (var t =5; t >=0; --t){
//   var year = (2000+t).toString();
//   var img = ee.Image(Gunarso.get(t));
//   Map.addLayer(img, {min: 0, max: 5,
//     palette:[db, lb, gr,  yellow, red, whi ]}, year);
// }


// // ####################
// // # Step 2: Intermediate output for 1990-2000, 2000-2005, 2005-2010 
// // ####################
var noloss = blank.where(lossYear.gt(5).and(lossYear.lt(1)), 1).clip(totalarea).rename(['noloss']); // lossyear indicator of 0 and 
// .and(OP00.eq(0).and(OP05.eq(1)))

var Gunarso_age = ee.Image([lossYear,OP90, OP00, OP05,
                          OP10, treecover2000,blank,noloss]);

var yr = ee.List.sequence(0, 5, 1);

// Palm oil age map 
var age = function(t){
  t = ee.Number(t);
  // boundaries of age map
  var agemap = blank.where(OP05.eq(1),1);
  agemap = agemap.updateMask(agemap);
  var ageNOP_NOP = Gunarso_age.expression(
  ' (noloss ==1 && t>=5)? t-5 \
  : (noloss ==1 && t< 5)? 40 \
    : (noloss == 0  && t<lossYear )? 40 \
    : (noloss == 0  && t>=lossYear )? t-lossYear \
      :OTH',
      {  
        'lossYear': Gunarso_age.select('lossyear'),
        'noloss': Gunarso_age.select('noloss'),
        't': t,
        'OTH': Gunarso_age.select('blank').add(100),
      }
  );
  var ageNOP_OP = Gunarso_age.expression(
  ' noloss ==1 ? t+5 \
    : (noloss == 0 && t< lossYear )? (25+t-lossYear+1) \
    : (noloss == 0 && t>=lossYear )? (t-lossYear) \
      :OTH',
      {  
        'lossYear': Gunarso_age.select('lossyear'),
        'noloss': Gunarso_age.select('noloss'),
        't': t,
        'OTH': Gunarso_age.select('blank').add(100),
      }
  );

  var ageOP_OP =Gunarso_age.expression(
  ' noloss == 1 ? t+13 \
    : noloss == 0 && t< lossYear ? (25+t-lossYear+1) \
    : noloss == 0 && t>=lossYear ? (t-lossYear) \
      :OTH',
      {  
        'lossYear': Gunarso_age.select('lossyear'),
        'noloss': Gunarso_age.select('noloss'),
        't': t,
        'OTH': Gunarso_age.select('blank').add(100),
      }
  );
  
  agemap = agemap
  .where(OP90.eq(0).and(OP00.eq(0)), ageNOP_NOP)
  .where(OP90.eq(0).and(OP00.eq(1)), ageNOP_OP)
  .where(OP90.eq(1).and(OP00.eq(1)), ageOP_OP);
  
  // agemap= agemap.updateMask(agemap.lte(25));
  
  // agemap = agemap.eq(26);
  // var agemap2 = agemap
  // .where(noloss.eq(0).and(OP00.eq(0)), ageNOP_NOP)
  // .where(noloss.eq(0).and(OP00.eq(1)), ageNOP_OP)
  // .where(noloss.eq(1).and(OP00.eq(1)), ageOP_OP);

  return(ee.Image(agemap));
};


var Gunarso_age = yr.map(age);
// for (var t =5; t >=0; --t){
//   var year = (2000+t).toString();
//   var img = ee.Image(Gunarso_age.get(t));
//   Map.addLayer(img, {min: 0, max: 25,
//     palette:[ yellow, gr, lb ,db]}, year);
// }


var printmap = function(t){
  var year = (2000+t).toString();
  t= ee.Number(t);
  var img = ee.Image(Gunarso_age.get(t));
  Map.addLayer(img, {min: 0, max: 25,
    palette:[ yellow, gr, lb ,db]}, year);
  return(3);
};

var t=0;
printmap(t);
t=1;
printmap(t);
t=2;
printmap(t);
t=3;
printmap(t);
t=4;
printmap(t);
t=5;
// for (var t =5; t >=0; --t){
//   var year = (2000+t).toString();
//   var img = ee.Image(Gunarso_age.get(t));
//   var img_indicate = img.gt(25); 
//   Map.addLayer(img_indicate, {min: 0, max: 1,
//     palette:[ yellow, gr, lb ,db]}, year);
// }

// Map.addLayer(OP00.updateMask(OP00), {min: 0, max: 1,
//     palette:[whi, lb ]}, "OP00");
// Map.addLayer(OP05.updateMask(OP05), {min: 0, max: 1,
//     palette:[whi, lb ]}, "OP05");

