/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var gfcImage = ee.Image("UMD/hansen/global_forest_change_2015"),
    countries = ee.FeatureCollection("ft:1tdSwUL7MVpOauSgRzqVTOwdfy17KDbw-1d9omPw"),
    country_simple = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017"),
    country_detailed = ee.FeatureCollection("USDOS/LSIB/2013"),
    OP00 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/OP00"),
    OP05 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/OP05"),
    OP10 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/OP10"),
    OP90 = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/OP/OP90"),
    in05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Indo05_pseudo"),
    in10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Indo10_pseudo"),
    in00 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Indo00_pseudo"),
    Pen05 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Pen05_pseudo"),
    Pen10 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Pen10_pseudo"),
    Pen90 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Pen90_pseudo"),
    Pen00 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Pen00_pseudo"),
    in90 = ee.FeatureCollection("users/6GP6PM63OKTGEO6YIDC6BKJF/Indo90_pseudo"),
    geometry = /* color: #d63000 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var addCat = function(feature){
  feature = ee.Feature(feature);
  return feature.set('cat', 1);
}
var convert_to_image = function(feature){
  feature = ee.FeatureCollection(feature);
  return feature.reduceToImage({properties: ['cat'],reducer: ee.Reducer.first()});
};
var concatenate = function(map, prev){
  map = ee.Image(map);
  prev = ee.Image(prev);
  return ee.Image(prev.where(map.eq(1),1));
};


var layer90 = ee.List([Pen90.map(addCat), in90.map(addCat)]).map(convert_to_image);
var layer00 = ee.List([Pen00.map(addCat), in00.map(addCat)]).map(convert_to_image);
var layer05 = ee.List([Pen05.map(addCat), in05.map(addCat)]).map(convert_to_image);
var layer10 = ee.List([Pen10.map(addCat), in10.map(addCat)]).map(convert_to_image);

var Malaysia = country_simple.filterMetadata('country_co', 'equals', "MY");
var Indonesia = country_simple.filterMetadata('country_co', 'equals', "ID");
var PapuaNewGuinea = country_simple.filterMetadata('country_co', 'equals', "PP");
var MIP = country_simple.filter(ee.Filter.inList('country_co', ['PP', 'ID', 'MY']))
var blank = ee.Image([0]).clip(MIP)
var OP90 = ee.Image(layer90.iterate(concatenate, blank)).rename(['OP90']);
var OP00 = ee.Image(layer00.iterate(concatenate, blank)).rename(['OP00']);
var OP05 = ee.Image(layer05.iterate(concatenate, blank)).rename(['OP05']);
var OP10 = ee.Image(layer10.iterate(concatenate, blank)).rename(['OP10']);
OP00 = OP00.where(OP90.eq(1), 1);
OP05 = OP05.where(OP00.eq(1), 1);
OP10 = OP10.where(OP05.eq(1), 1);
Map.addLayer(OP10.updateMask(OP10), {min: 0, max: 1,palette:[ '#f7f7f7', '#6d0096' ]}, "Cropland 2010");
Map.addLayer(OP05.updateMask(OP05), {min: 0, max: 1,palette:[ '#f7f7f7', '#7f00ff' ]}, "Cropland 2005");
Map.addLayer(OP00.updateMask(OP00), {min: 0, max: 1,palette:[ '#f7f7f7', '#ee7eff' ]}, "Cropland 2000");
// Map.addLayer(OP90.updateMask(OP90), {min: 0, max: 1,palette:[ '#f7f7f7', '#eab1ff' ]}, "Cropland 1990");



var imageSelect = ui.Select({
  items: [
    {label: 'Jambi', value: 'Jambi'},
    {label: 'Sumatera Barat', value: 'Sumatera Barat'},
    {label: 'Bengkulu', value: 'Bengkulu'},
    {label: 'Aceh', value: 'Aceh'},
    {label: 'Jawa', value: 'Jawa'},
    {label: 'Kalimantan Barat', value: 'Kalimantan Barat'},
    {label: 'Kalimantan Tengah', value: 'Kalimantan Tengah'},
    {label: 'Kalimantan Timur', value: 'Kalimantan Timur'},
    {label: 'Sumatera Selatan', value: 'Sumatera Selatan'}
    ],
  onChange: function(value) {
  var Indonesia_1 = ee.FeatureCollection('ft:1BIvH58CL17YCBkZe4Nmb3m27Ngcl2f-w-oB8zWzk', 'geometry');
  var ROA  =  Indonesia_1.filterMetadata('NAME_1', 'equals', value);
  
  
  

  
  
  
  
      // define totalarea 
  var totalarea = ee.FeatureCollection(ROA);
  
  var totalarea_raster = ee.FeatureCollection(totalarea)
  .reduceToImage({properties: ['ID_0'],reducer: ee.Reducer.mean()}); // for Indonesia_1
  var totalarea_outline = totalarea.geometry().bounds();

  
  Map.addLayer(totalarea_raster,{min: 0, max: 1,palette:[ '#f7f7f7', '#d6d6d6' ]}, 'area footprint')
  var lossYear = gfcImage.select(['lossyear']).clip(totalarea_outline);
  lossYear = lossYear.where(lossYear.eq(0), 99).add(2000);
  var treecover2000 = gfcImage.select(['treecover2000']).clip(totalarea_outline);
  var blank = lossYear.multiply(0).rename(['blank']).clip(totalarea_outline);
  
  
  
  
   
  
  // ########
  // # Load Hansen of lossYear, perform speckle filtering and majority sampling 
  // ########
  var binary_pre = blank.where(OP90.eq(1).and(OP10.eq(1)), 1).where((OP90.eq(0)).and(OP10.eq(1)),2 );
  var binary = blank.where(totalarea_raster.neq(0),binary_pre).clip(totalarea_outline);
  //Expansion
  var lossYear_expand = lossYear.neq(2099); // make it binary 
  lossYear_expand = lossYear_expand.where(lossYear_expand.connectedPixelCount(128).lte(64), 0); 
  lossYear_expand = lossYear.where(lossYear_expand.neq(1), 2099);
  //Replant 
  var lossYear_replant = ee.Image([2099]).clip(totalarea_outline).where(lossYear.neq(2099).updateMask(OP10.neq(0)), lossYear.divide(2).ceil().multiply(2).toInt());
  lossYear_replant =lossYear_replant.min(lossYear_replant.focal_mode(10, 'square'));
  lossYear_replant= lossYear_replant.where(lossYear_replant.connectedPixelCount(256).lte(16), 2099);
  //Final assembling 
  var lossYear_final = lossYear.where(binary.eq(1), lossYear_replant).where(binary.eq(2),lossYear_expand);
  lossYear = lossYear_final; 
  Map.addLayer(lossYear_final.updateMask(lossYear_final.neq(2099)).updateMask(OP10.neq(0)), {min: 2000, max: 2014,
      palette:[ 'ff510f','#fff832','#4cff62','0000FF']}, 'lossYear final');
  
  
  
  // ############
  // # Step 3: Preliminary data processing 
  // # 1) Buffer by field treatment 
  // # 2) Create 2000 Basemap  
  // ############
  
  // ########
  // # 1) 1990 to 2000 Buffer by field, 2000 to 2005 Buffer by field,2005 to 2010 Buffer by field 
  // ########
  // Set scale for buffering (e.g.,reduceRegion percentile operation)
  var scale = ee.Number(500); 
  
  var Designated90 = blank.where(  OP90.eq(0).and(OP00.eq(1)), 1); 
  var Designated00 = blank.where(  (OP00.eq(0).and(OP05.eq(1)))
    .and(
      (lossYear.lte(2000)).or(lossYear.gt(2005)).or(lossYear.eq(99))), 1);
  var Designated05 = blank.where(
    (OP05.eq(0).and(OP10.eq(1)))
    .and(
      (lossYear.lte(2005)).or(lossYear.gt(2010)).or(lossYear.eq(99))), 1);
  
  var Target00 = ee.List([0, 0.2,0.4,0.6,0.8,1.0]);
  var Target90 = ee.List([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]); 
  var Target05 = ee.List([0,0.2,0.4,0.6,0.8,1.0]);
  
  var source90 = OP90; source90 = source90.updateMask(source90);
  var source00 = OP00; source00 = source00.updateMask(source00);
  var source05 = OP05; source05 = source05.updateMask(source05);
  
  var years90 = ee.List.sequence(1991, 2000,1);
  var years00 = ee.List.sequence(2001, 2005,1);
  var years05  = ee.List.sequence(2006, 2010,1);
  
  var buffer = function(Designated, Target,source, years ){
    var offset = ee.Number(years.get(0)).subtract(1);
    var cumulativeCost = ee.Image([1]).clip(totalarea_outline).cumulativeCost({source: source,maxDistance: 100 * 300 });
    var costmap = blank.where(Designated.eq(1), cumulativeCost);
    costmap = costmap.updateMask(costmap);
    var mincostmapping = function(t){
      t= ee.Number(t);
      var N_target = ee.Number(Target.get(t));
      var output = costmap.reduceRegion({
        reducer: ee.Reducer.percentile([t.multiply(100)]),
        geometry: totalarea,
        scale: scale,
        maxPixels: 12e9,
      });
      return ee.Number(output.get('blank'));
    };
    var threshold = Target.map(mincostmapping); 
    var execute = function(x, prev){
      x= ee.Number(x);
      prev = ee.Image(prev);
      var t=x.toInt();  
      var index =ee.Number(x).subtract(offset).toInt();
      var cuttoff = ee.Number(threshold.get(index)); 
      var cuttoff_before = ee.Number(
                    ee.Algorithms.If(index.gt(1), ee.Number(threshold.get(index.subtract(1).toInt())), ee.Number(0.0))
                    );
      var Binary = blank.
                where(costmap.lte(cuttoff).and(costmap.gt(cuttoff_before)), 1);
      var lossYear_update = prev.where(Binary.eq(1), t);
      return ee.Image(lossYear_update);
    };
    var map = ee.Image(years.iterate(execute, lossYear)); 
    return map;
  };
  
  var Hansen_update = buffer(Designated90, Target90,source90, years90); 
  lossYear = Hansen_update;
  Hansen_update = buffer(Designated00, Target00,source00, years00); 
  lossYear = Hansen_update; 
  Hansen_update = buffer(Designated05, Target05,source05, years05); 
  lossYear = Hansen_update; 
  Map.addLayer(lossYear.updateMask(lossYear.neq(2099)), {min: 1990, max: 2010, palette: ['ff510f','#fff832','#4cff62','#0f00ff' ]}, 'simulated year of forest clearing');
  
  
  // ########
  // # 2) Create year_1990 land use clasfficiation  
  // ########
  
  var Gunarso = ee.Image([lossYear,OP90, OP00, OP05,OP10, treecover2000,blank]);
  // code NF, F, OPR, OP into numbers 
  var NF_color = ee.Number(1);
  var F_color = ee.Number(2);
  var OPReplant_color = ee.Number(3); 
  var OP_color = ee.Number(4); 
  var NOP_color = ee.Number(5);
  var OTH_color = ee.Number(6);
  
  // Create year_1990 classified layer of OP, F, NF  
  var year_1990 = Gunarso.expression(
  '(OP00 ==1)? OP\
    :((OP00==0) && treecover2000>=30)? F\
      :((OP00==0)&& treecover2000<30)? NF\
        :OTH',
      {  
        'OP': Gunarso.select('blank').add(OP_color),
        'F': Gunarso.select('blank').add(F_color),
        'NF': Gunarso.select('blank').add(NF_color),
        'OTH': Gunarso.select('blank').add(OTH_color),
        'OP00': Gunarso.select('OP00'),
        'treecover2000': Gunarso.select('treecover2000')
      }
  ).rename(['year_1990']);

  





  // #########################a
  // #Step4 : Land use classifications,  2000 to 2010 
  // #########################
  var Gunarso_intermediate = ee.Image([lossYear,year_1990, blank, OP00, OP05, OP10, OP90]);
  var yr = ee.List.sequence(2000, 2010, 1);
  var annual = function(t){
    t= ee.Number(t);
    var executeOP_OP = Gunarso_intermediate.expression(
    'lossYear==t && OP90 == 1 ? OPR\
      :lossYear==t && OP90 == 0 ? OP\
      :(lossYear>t || lossYear<t) ? OP\
      : OTH',
        {  
          'OP': Gunarso_intermediate.select('blank').add(OP_color),
          'OPR': Gunarso_intermediate.select('blank').add(OPReplant_color),
          'lossYear': Gunarso_intermediate.select('lossyear'),
          'OP90': Gunarso_intermediate.select('OP90'),
          'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
          't': t,
        }
    );
  
    var executeNOP_OP = Gunarso_intermediate.expression(
      'lossYear>t ? basemap\
          : lossYear<=t? OP\
            :OTH',
        {  
          'F': Gunarso_intermediate.select('blank').add(F_color),
          'OP': Gunarso_intermediate.select('blank').add(OP_color),
          'NF': Gunarso_intermediate.select('blank').add(NF_color),
          'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
          'lossYear': Gunarso_intermediate.select('lossyear'),
          'basemap': Gunarso_intermediate.select('year_1990'),
          't': t,
          'NF_color': NF_color,
          'F_color': F_color
        }
    );
    var executeNOP_NOP = Gunarso_intermediate.expression(
    ' basemap==F_color && (lossYear>t || lossYear==2099)? F\
      :basemap==F_color && (lossYear<=t && lossYear<2099)? NF\
            :basemap==NF_color ? NF\
              :OTH',
        {  
          'F': Gunarso_intermediate.select('blank').add(F_color),
          'NF': Gunarso_intermediate.select('blank').add(NF_color),
          'OTH': Gunarso_intermediate.select('blank').add(OTH_color),
          'lossYear': Gunarso_intermediate.select('lossyear'),
          'basemap': Gunarso_intermediate.select('year_1990'),
          't': t,
          'NF_color': NF_color,
          'F_color': F_color
        }
    );
    var yearmap = blank
    .where(OP00.eq(1).and(OP10.eq(1)),executeOP_OP)
    .where(OP00.eq(0).and(OP10.eq(1)),executeNOP_OP)
    .where(OP00.eq(0).and(OP10.eq(0)),executeNOP_NOP);
    
    var final_yearmap = blank.where(totalarea_raster.neq(0), yearmap);
    return ee.Image(final_yearmap);
  };
  var Gunarso_final = yr.map(annual);
  
  
  // var printclass2 = function(t){
  //   var year = t.toString();
  //   t= ee.Number(t).subtract(2000); 
  //   var img = ee.Image(Gunarso_final.get(t)); 
  //   Map.addLayer(img.selfMask(), {min: 0, max: 5,
  //     palette:[ '#ffffff', '#d1ee6c', '#51612e',  '#51612e', '#d51483', '#f7f7f7', ]}, year);
  // };
  // printclass2(2009);
  
  
  var printclass = function(t){
    var year = t.toString();
    t= ee.Number(t).subtract(2000);
    var img = ee.Image(Gunarso_final.get(t));
    var layer = ui.Map.Layer(img.selfMask(), {min: 0, max: 5,
      palette:[ '#7290ff', '#7290ff', '#fffcb9',  '#ff9d9d', '#ff9d9d', '#ff7c7c' ]}, year);
      Map.layers().set(20, layer);
  };
  
  var slider = ui.Slider();
  slider.setMax(2010);
  slider.setMin(2000);
  slider.setStep(1);
  
  slider.setValue(2005);  // Set a default value.
  slider.onChange(printclass);
  slider.style().set(
    {
    width: '300px',
    padding: '10px',
    position: 'bottom-right'
      
    });
  Map.add(slider.setValue(2005));
  }
});

// Set a place holder.
imageSelect.setPlaceholder('Selected Sample location...');

imageSelect.setValue('Jambi');

print(imageSelect);





  
  var legend = ui.Panel({style: {position: 'bottom-left'}});
  legend.add(ui.Label({
    value: "land use class",
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0px'
    }
  }));
  
  var color_list = ee.List(['#7290ff', '#fffcb9', '#ff7c7c'])
  var class_names = ee.List(['other use', 'forest', 'agriculture']);
  var entry;
  for (var x = 0; x<3; x++){
    entry = [
      ui.Label({style:{color:color_list.get(x).getInfo(), margin: '0 0 4px 0'}, value: '██'}),
      ui.Label({
        value: class_names.get(x).getInfo(),
        style: {
          margin: '0 0 4px 4px'
        }
      })
    ];
    legend.add(ui.Panel(entry, ui.Panel.Layout.Flow('horizontal')))
  }
  
  Map.add(legend);
  
  var legend2 = ui.Panel({style: {position: 'middle-left'}});
  legend2.add(ui.Label({
    value: "cropland map",
    style: {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 4px 0',
      padding: '0px'
    }
  }));
  
  var color_list2 = ee.List(['#6d0096', '#7f00ff','#ee7eff','#eab1ff' ])
  var class_names2 = ee.List(['2010', '2005', '2000', '1990']);
  var entry2;
  for (var x = 0; x<4; x++){
    entry2 = [
      ui.Label({style:{color:color_list2.get(x).getInfo(), margin: '0 0 4px 0'}, value: '██'}),
      ui.Label({
        value: class_names2.get(x).getInfo(),
        style: {
          margin: '0 0 4px 4px'
        }
      })
    ];
    legend2.add(ui.Panel(entry2, ui.Panel.Layout.Flow('horizontal')))
  }
  
  Map.add(legend2);
  
  
  


