/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var AFTER = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/AFTER"),
    BEFORE = ee.Image("users/6GP6PM63OKTGEO6YIDC6BKJF/BEFORE"),
    geometry = /* color: d63000 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "LinearRing",
          "coordinates": [
            [
              101.3983154296875,
              1.016182073033441
            ],
            [
              101.3983154296875,
              -0.21972602392079613
            ],
            [
              102.821044921875,
              -0.2252191465717146
            ],
            [
              102.81005859375,
              1.0106897682409128
            ],
            [
              101.3983154296875,
              1.016182073033441
            ]
          ]
        },
        {
          "type": "Point",
          "coordinates": [
            102.0849609375,
            0.39550467153201946
          ]
        }
      ]
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// list map it.
// list should be 10, 20, 30, 40, 50, 60 and so forth 
// more syntax to deal with 
// 1. Do you refine the algorithm, or just crank one out right now? 
centerMap(102.0849609375, 0.39550467153201946, 9);

var db= String('0000FF');
var lb= String('#11ffff');
var red=String('ff510f');
var yellow=String('#fff832');
var gr= String('#4cff62');
var whi=String('#ffffff');

//##########
//# Data Preprocessing 
//# Mark the area we want to do extrapolation on 
//##########
AFTER = AFTER.where(AFTER.eq(3),4);
BEFORE = BEFORE.where(BEFORE.eq(3),4);
var expansion_area = AFTER.gte(3).and((BEFORE.lte(2))); 

var sources =BEFORE.eq(4);
sources = sources.updateMask(sources);


// Apply kernal to source (problematic) 
var kernel = ee.Kernel.circle({radius: 1});
var sources_kernal = sources.focal_min({kernel: kernel, iterations: 5});
            // .focal_max({kernel: kernel, iterations: 2});

// var sources_kernal2 = sources.reduceNeighborhood(ee.call("Reducer.min"), ee.call("Kernel.circle", 1));
var sources_kernal2 = sources.reduceNeighborhood(ee.Reducer.min(), ee.Kernel.circle(5, 'meters'));


Map.addLayer(sources.updateMask(sources), {min: 0, max: 1, palette:[ whi,gr ]},"sources");
Map.addLayer(sources_kernal.updateMask(sources_kernal), {min: 0, max: 1, palette:[ whi,gr ]},"sources_kernal");
Map.addLayer(sources_kernal2.updateMask(sources_kernal2), {min: 0, max: 1, palette:[ whi,gr ]},"sources_kernal2");



